tic(this.constructor,"getContractAddress")(te),ne=getStatic(this.constructor,"getContract")(ae,this.interface,this.signer);return addContractWait(ne,te),defineReadOnly(ne,"deployTransaction",te),ne})}attach(t){return this.constructor.getContract(t,this.interface,this.signer)}connect(t){return new this.constructor(this.interface,this.bytecode,t)}static fromSolidity(t,u){t==null&&logger$r.throwError("missing compiler output",Logger.errors.MISSING_ARGUMENT,{argument:"compilerOutput"}),typeof t=="string"&&(t=JSON.parse(t));const c=t.abi;let ee=null;return t.bytecode?ee=t.bytecode:t.evm&&t.evm.bytecode&&(ee=t.evm.bytecode),new this(c,ee,u)}static getInterface(t){return Contract.getInterface(t)}static getContractAddress(t){return getContractAddress(t)}static getContract(t,u,c){return new Contract(t,u,c)}}class BaseX{constructor(t){defineReadOnly(this,"alphabet",t),defineReadOnly(this,"base",t.length),defineReadOnly(this,"_alphabetMap",{}),defineReadOnly(this,"_leader",t.charAt(0));for(let u=0;u<t.length;u++)this._alphabetMap[t.charAt(u)]=u}encode(t){let u=arrayify(t);if(u.length===0)return"";let c=[0];for(let te=0;te<u.length;++te){let ae=u[te];for(let ne=0;ne<c.length;++ne)ae+=c[ne]<<8,c[ne]=ae%this.base,ae=ae/this.base|0;for(;ae>0;)c.push(ae%this.base),ae=ae/this.base|0}let ee="";for(let te=0;u[te]===0&&te<u.length-1;++te)ee+=this._leader;for(let te=c.length-1;te>=0;--te)ee+=this.alphabet[c[te]];return ee}decode(t){if(typeof t!="string")throw new TypeError("Expected String");let u=[];if(t.length===0)return new Uint8Array(u);u.push(0);for(let c=0;c<t.length;c++){let ee=this._alphabetMap[t[c]];if(ee===void 0)throw new Error("Non-base"+this.base+" character");let te=ee;for(let ae=0;ae<u.length;++ae)te+=u[ae]*this.base,u[ae]=te&255,te>>=8;for(;te>0;)u.push(te&255),te>>=8}for(let c=0;t[c]===this._leader&&c<t.length-1;++c)u.push(0);return arrayify(new Uint8Array(u.reverse()))}}new BaseX("abcdefghijklmnopqrstuvwxyz234567");const Base58=new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");var SupportedAlgorithm;(function(n){n.sha256="sha256",n.sha512="sha512"})(SupportedAlgorithm||(SupportedAlgorithm={}));const version$h="sha2/5.7.0",logger$q=new Logger(version$h);function ripemd160$2(n){return"0x"+hash$1.ripemd160().update(arrayify(n)).digest("hex")}function sha256$2(n){return"0x"+hash$1.sha256().update(arrayify(n)).digest("hex")}function sha512$3(n){return"0x"+hash$1.sha512().update(arrayify(n)).digest("hex")}function computeHmac(n,t,u){return SupportedAlgorithm[n]||logger$q.throwError("unsupported algorithm "+n,Logger.errors.UNSUPPORTED_OPERATION,{operation:"hmac",algorithm:n}),"0x"+hash$1.hmac(hash$1[n],arrayify(t)).update(arrayify(u)).digest("hex")}function pbkdf2$3(n,t,u,c,ee){n=arrayify(n),t=arrayify(t);let te,ae=1;const ne=new Uint8Array(c),oe=new Uint8Array(t.length+4);oe.set(t);let ie,se;for(let ue=1;ue<=ae;ue++){oe[t.length]=ue>>24&255,oe[t.length+1]=ue>>16&255,oe[t.length+2]=ue>>8&255,oe[t.length+3]=ue&255;let le=arrayify(computeHmac(ee,n,oe));te||(te=le.length,se=new Uint8Array(te),ae=Math.ceil(c/te),ie=c-(ae-1)*te),se.set(le);for(let fe=1;fe<u;fe++){le=arrayify(computeHmac(ee,n,le));for(let pe=0;pe<te;pe++)se[pe]^=le[pe]}const ce=(ue-1)*te,de=ue===ae?ie:te;ne.set(arrayify(se).slice(0,de),ce)}return hexlify(ne)}const version$g="wordlists/5.7.0",logger$p=new Logger(version$g);class Wordlist{constructor(t){logger$p.checkAbstract(new.target,Wordlist),defineReadOnly(this,"locale",t)}split(t){return t.toLowerCase().split(/ +/g)}join(t){return t.join(" ")}static check(t){const u=[];for(let c=0;c<2048;c++){const ee=t.getWord(c);if(c!==t.getWordIndex(ee))return"0x";u.push(ee)}return id$1(u.join(`
`)+`
`)}static register(t,u){u||(u=t.locale)}}const words="AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";let wordlist=null;function loadWords(n){if(wordlist==null&&(wordlist=words.replace(/([A-Z])/g," $1").toLowerCase().substring(1).split(" "),Wordlist.check(n)!=="0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60"))throw wordlist=null,new Error("BIP39 Wordlist for en (English) FAILED")}class LangEn extends Wordlist{constructor(){super("en")}getWord(t){return loadWords(this),wordlist[t]}getWordIndex(t){return loadWords(this),wordlist.indexOf(t)}}const langEn=new LangEn;Wordlist.register(langEn);const wordlists={en:langEn},version$f="hdnode/5.7.0",logger$o=new Logger(version$f),N$3=BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),MasterSecret=toUtf8Bytes("Bitcoin seed"),HardenedBit=2147483648;function getUpperMask(n){return(1<<n)-1<<8-n}function getLowerMask(n){return(1<<n)-1}function bytes32(n){return hexZeroPad(hexlify(n),32)}function base58check(n){return Base58.encode(concat$4([n,hexDataSlice(sha256$2(sha256$2(n)),0,4)]))}function getWordlist(n){if(n==null)return wordlists.en;if(typeof n=="string"){const t=wordlists[n];return t==null&&logger$o.throwArgumentError("unknown locale","wordlist",n),t}return n}const _constructorGuard$1={},defaultPath="m/44'/60'/0'/0/0";class HDNode{constructor(t,u,c,ee,te,ae,ne,oe){if(t!==_constructorGuard$1)throw new Error("HDNode constructor cannot be called directly");if(u){const ie=new SigningKey(u);defineReadOnly(this,"privateKey",ie.privateKey),defineReadOnly(this,"publicKey",ie.compressedPublicKey)}else defineReadOnly(this,"privateKey",null),defineReadOnly(this,"publicKey",hexlify(c));defineReadOnly(this,"parentFingerprint",ee),defineReadOnly(this,"fingerprint",hexDataSlice(ripemd160$2(sha256$2(this.publicKey)),0,4)),defineReadOnly(this,"address",computeAddress(this.publicKey)),defineReadOnly(this,"chainCode",te),defineReadOnly(this,"index",ae),defineReadOnly(this,"depth",ne),oe==null?(defineReadOnly(this,"mnemonic",null),defineReadOnly(this,"path",null)):typeof oe=="string"?(defineReadOnly(this,"mnemonic",null),defineReadOnly(this,"path",oe)):(defineReadOnly(this,"mnemonic",oe),defineReadOnly(this,"path",oe.path))}get extendedKey(){if(this.depth>=256)throw new Error("Depth too large!");return base58check(concat$4([this.privateKey!=null?"0x0488ADE4":"0x0488B21E",hexlify(this.depth),this.parentFingerprint,hexZeroPad(hexlify(this.index),4),this.chainCode,this.privateKey!=null?concat$4(["0x00",this.privateKey]):this.publicKey]))}neuter(){return new HDNode(_constructorGuard$1,null,this.publicKey,this.parentFingerprint,this.chainCode,this.index,this.depth,this.path)}_derive(t){if(t>4294967295)throw new Error("invalid index - "+String(t));let u=this.path;u&&(u+="/"+(t&2147483647));const c=new Uint8Array(37);if(t&HardenedBit){if(!this.privateKey)throw new Error("cannot derive child of neutered node");c.set(arrayify(this.privateKey),1),u&&(u+="'")}else c.set(arrayify(this.publicKey));for(let ue=24;ue>=0;ue-=8)c[33+(ue>>3)]=t>>24-ue&255;const ee=arrayify(computeHmac(SupportedAlgorithm.sha512,this.chainCode,c)),te=ee.slice(0,32),ae=ee.slice(32);let ne=null,oe=null;this.privateKey?ne=bytes32(BigNumber.from(te).add(this.privateKey).mod(N$3)):oe=new SigningKey(hexlify(te))._addPoint(this.publicKey);let ie=u;const se=this.mnemonic;return se&&(ie=Object.freeze({phrase:se.phrase,path:u,locale:se.locale||"en"})),new HDNode(_constructorGuard$1,ne,oe,this.fingerprint,bytes32(ae),t,this.depth+1,ie)}derivePath(t){const u=t.split("/");if(u.length===0||u[0]==="m"&&this.depth!==0)throw new Error("invalid path - "+t);u[0]==="m"&&u.shift();let c=this;for(let ee=0;ee<u.length;ee++){const te=u[ee];if(te.match(/^[0-9]+'$/)){const ae=parseInt(te.substring(0,te.length-1));if(ae>=HardenedBit)throw new Error("invalid path index - "+te);c=c._derive(HardenedBit+ae)}else if(te.match(/^[0-9]+$/)){const ae=parseInt(te);if(ae>=HardenedBit)throw new Error("invalid path index - "+te);c=c._derive(ae)}else throw new Error("invalid path component - "+te)}return c}static _fromSeed(t,u){const c=arrayify(t);if(c.length<16||c.length>64)throw new Error("invalid seed");const ee=arrayify(computeHmac(SupportedAlgorithm.sha512,MasterSecret,c));return new HDNode(_constructorGuard$1,bytes32(ee.slice(0,32)),null,"0x00000000",bytes32(ee.slice(32)),0,0,u)}static fromMnemonic(t,u,c){return c=getWordlist(c),t=entropyToMnemonic(mnemonicToEntropy(t,c),c),HDNode._fromSeed(mnemonicToSeed(t,u),{phrase:t,path:"m",locale:c.locale})}static fromSeed(t){return HDNode._fromSeed(t,null)}static fromExtendedKey(t){const u=Base58.decode(t);(u.length!==82||base58check(u.slice(0,78))!==t)&&logger$o.throwArgumentError("invalid extended key","extendedKey","[REDACTED]");const c=u[4],ee=hexlify(u.slice(5,9)),te=parseInt(hexlify(u.slice(9,13)).substring(2),16),ae=hexlify(u.slice(13,45)),ne=u.slice(45,78);switch(hexlify(u.slice(0,4))){case"0x0488b21e":case"0x043587cf":return new HDNode(_constructorGuard$1,null,hexlify(ne),ee,ae,te,c,null);case"0x0488ade4":case"0x04358394 ":if(ne[0]!==0)break;return new HDNode(_constructorGuard$1,hexlify(ne.slice(1)),null,ee,ae,te,c,null)}return logger$o.throwArgumentError("invalid extended key","extendedKey","[REDACTED]")}}function mnemonicToSeed(n,t){t||(t="");const u=toUtf8Bytes("mnemonic"+t,UnicodeNormalizationForm.NFKD);return pbkdf2$3(toUtf8Bytes(n,UnicodeNormalizationForm.NFKD),u,2048,64,"sha512")}function mnemonicToEntropy(n,t){t=getWordlist(t),logger$o.checkNormalize();const u=t.split(n);if(u.length%3!==0)throw new Error("invalid mnemonic");const c=arrayify(new Uint8Array(Math.ceil(11*u.length/8)));let ee=0;for(let ie=0;ie<u.length;ie++){let se=t.getWordIndex(u[ie].normalize("NFKD"));if(se===-1)throw new Error("invalid mnemonic");for(let ue=0;ue<11;ue++)se&1<<10-ue&&(c[ee>>3]|=1<<7-ee%8),ee++}const te=32*u.length/3,ae=u.length/3,ne=getUpperMask(ae);if((arrayify(sha256$2(c.slice(0,te/8)))[0]&ne)!==(c[c.length-1]&ne))throw new Error("invalid checksum");return hexlify(c.slice(0,te/8))}function entropyToMnemonic(n,t){if(t=getWordlist(t),n=arrayify(n),n.length%4!==0||n.length<16||n.length>32)throw new Error("invalid entropy");const u=[0];let c=11;for(let ae=0;ae<n.length;ae++)c>8?(u[u.length-1]<<=8,u[u.length-1]|=n[ae],c-=8):(u[u.length-1]<<=c,u[u.length-1]|=n[ae]>>8-c,u.push(n[ae]&getLowerMask(8-c)),c+=3);const ee=n.length/4,te=arrayify(sha256$2(n))[0]&getUpperMask(ee);return u[u.length-1]<<=ee,u[u.length-1]|=te>>8-ee,t.join(u.map(ae=>t.getWord(ae)))}function isValidMnemonic(n,t){try{return mnemonicToEntropy(n,t),!0}catch{}return!1}function getAccountPath(n){return(typeof n!="number"||n<0||n>=HardenedBit||n%1)&&logger$o.throwArgumentError("invalid account index","index",n),`m/44'/60'/${n}'/0/0`}const version$e="random/5.7.0",logger$n=new Logger(version$e);function getGlobal(){if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw new Error("unable to locate global object")}const anyGlobal=getGlobal();let crypto$1=anyGlobal.crypto||anyGlobal.msCrypto;(!crypto$1||!crypto$1.getRandomValues)&&(logger$n.warn("WARNING: Missing strong random number source"),crypto$1={getRandomValues:function(n){return logger$n.throwError("no secure random source avaialble",Logger.errors.UNSUPPORTED_OPERATION,{operation:"crypto.getRandomValues"})}});function randomBytes(n){(n<=0||n>1024||n%1||n!=n)&&logger$n.throwArgumentError("invalid length","length",n);const t=new Uint8Array(n);return crypto$1.getRandomValues(t),arrayify(t)}function shuffled(n){n=n.slice();for(let t=n.length-1;t>0;t--){const u=Math.floor(Math.random()*(t+1)),c=n[t];n[t]=n[u],n[u]=c}return n}var aesJs={exports:{}},hasRequiredAesJs;function requireAesJs(){return hasRequiredAesJs||(hasRequiredAesJs=1,function(n,t){(function(u){function c(ke){return parseInt(ke)===ke}function ee(ke){if(!c(ke.length))return!1;for(var Ve=0;Ve<ke.length;Ve++)if(!c(ke[Ve])||ke[Ve]<0||ke[Ve]>255)return!1;return!0}function te(ke,Ve){if(ke.buffer&&ArrayBuffer.isView(ke)&&ke.name==="Uint8Array")return Ve&&(ke.slice?ke=ke.slice():ke=Array.prototype.slice.call(ke)),ke;if(Array.isArray(ke)){if(!ee(ke))throw new Error("Array contains invalid value: "+ke);return new Uint8Array(ke)}if(c(ke.length)&&ee(ke))return new Uint8Array(ke);throw new Error("unsupported array-like object")}function ae(ke){return new Uint8Array(ke)}function ne(ke,Ve,ze,Ue,Oe){(Ue!=null||Oe!=null)&&(ke.slice?ke=ke.slice(Ue,Oe):ke=Array.prototype.slice.call(ke,Ue,Oe)),Ve.set(ke,ze)}var oe=function(){function ke(ze){var Ue=[],Oe=0;for(ze=encodeURI(ze);Oe<ze.length;){var Dt=ze.charCodeAt(Oe++);Dt===37?(Ue.push(parseInt(ze.substr(Oe,2),16)),Oe+=2):Ue.push(Dt)}return te(Ue)}function Ve(ze){for(var Ue=[],Oe=0;Oe<ze.length;){var Dt=ze[Oe];Dt<128?(Ue.push(String.fromCharCode(Dt)),Oe++):Dt>191&&Dt<224?(Ue.push(String.fromCharCode((Dt&31)<<6|ze[Oe+1]&63)),Oe+=2):(Ue.push(String.fromCharCode((Dt&15)<<12|(ze[Oe+1]&63)<<6|ze[Oe+2]&63)),Oe+=3)}return Ue.join("")}return{toBytes:ke,fromBytes:Ve}}(),ie=function(){function ke(Ue){for(var Oe=[],Dt=0;Dt<Ue.length;Dt+=2)Oe.push(parseInt(Ue.substr(Dt,2),16));return Oe}var Ve="0123456789abcdef";function ze(Ue){for(var Oe=[],Dt=0;Dt<Ue.length;Dt++){var $t=Ue[Dt];Oe.push(Ve[($t&240)>>4]+Ve[$t&15])}return Oe.join("")}return{toBytes:ke,fromBytes:ze}}(),se={16:10,24:12,32:14},ue=[1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145],le=[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22],ce=[82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125],de=[3328402341,4168907908,4000806809,4135287693,4294111757,3597364157,3731845041,2445657428,1613770832,33620227,3462883241,1445669757,3892248089,3050821474,1303096294,3967186586,2412431941,528646813,2311702848,4202528135,4026202645,2992200171,2387036105,4226871307,1101901292,3017069671,1604494077,1169141738,597466303,1403299063,3832705686,2613100635,1974974402,3791519004,1033081774,1277568618,1815492186,2118074177,4126668546,2211236943,1748251740,1369810420,3521504564,4193382664,3799085459,2883115123,1647391059,706024767,134480908,2512897874,1176707941,2646852446,806885416,932615841,168101135,798661301,235341577,605164086,461406363,3756188221,3454790438,1311188841,2142417613,3933566367,302582043,495158174,1479289972,874125870,907746093,3698224818,3025820398,1537253627,2756858614,1983593293,3084310113,2108928974,1378429307,3722699582,1580150641,327451799,2790478837,3117535592,0,3253595436,1075847264,3825007647,2041688520,3059440621,3563743934,2378943302,1740553945,1916352843,2487896798,2555137236,2958579944,2244988746,3151024235,3320835882,1336584933,3992714006,2252555205,2588757463,1714631509,293963156,2319795663,3925473552,67240454,4269768577,2689618160,2017213508,631218106,1269344483,2723238387,1571005438,2151694528,93294474,1066570413,563977660,1882732616,4059428100,1673313503,2008463041,2950355573,1109467491,537923632,3858759450,4260623118,3218264685,2177748300,403442708,638784309,3287084079,3193921505,899127202,2286175436,773265209,2479146071,1437050866,4236148354,2050833735,3362022572,3126681063,840505643,3866325909,3227541664,427917720,2655997905,2749160575,1143087718,1412049534,999329963,193497219,2353415882,3354324521,1807268051,672404540,2816401017,3160301282,369822493,2916866934,3688947771,1681011286,1949973070,336202270,2454276571,201721354,1210328172,3093060836,2680341085,3184776046,1135389935,3294782118,965841320,831886756,3554993207,4068047243,3588745010,2345191491,1849112409,3664604599,26054028,2983581028,2622377682,1235855840,3630984372,2891339514,4092916743,3488279077,3395642799,4101667470,1202630377,268961816,1874508501,4034427016,1243948399,1546530418,941366308,1470539505,1941222599,2546386513,3421038627,2715671932,3899946140,1042226977,2521517021,1639824860,227249030,260737669,3765465232,2084453954,1907733956,3429263018,2420656344,100860677,4160157185,470683154,3261161891,1781871967,2924959737,1773779408,394692241,2579611992,974986535,664706745,3655459128,3958962195,731420851,571543859,3530123707,2849626480,126783113,865375399,765172662,1008606754,361203602,3387549984,2278477385,2857719295,1344809080,2782912378,59542671,1503764984,160008576,437062935,1707065306,3622233649,2218934982,3496503480,2185314755,697932208,1512910199,504303377,2075177163,2824099068,1841019862,739644986],fe=[2781242211,2230877308,2582542199,2381740923,234877682,3184946027,2984144751,1418839493,1348481072,50462977,2848876391,2102799147,434634494,1656084439,3863849899,2599188086,1167051466,2636087938,1082771913,2281340285,368048890,3954334041,3381544775,201060592,3963727277,1739838676,4250903202,3930435503,3206782108,4149453988,2531553906,1536934080,3262494647,484572669,2923271059,1783375398,1517041206,1098792767,49674231,1334037708,1550332980,4098991525,886171109,150598129,2481090929,1940642008,1398944049,1059722517,201851908,1385547719,1699095331,1587397571,674240536,2704774806,252314885,3039795866,151914247,908333586,2602270848,1038082786,651029483,1766729511,3447698098,2682942837,454166793,2652734339,1951935532,775166490,758520603,3000790638,4004797018,4217086112,4137964114,1299594043,1639438038,3464344499,2068982057,1054729187,1901997871,2534638724,4121318227,1757008337,0,750906861,1614815264,535035132,3363418545,3988151131,3201591914,1183697867,3647454910,1265776953,3734260298,3566750796,3903871064,1250283471,1807470800,717615087,3847203498,384695291,3313910595,3617213773,1432761139,2484176261,3481945413,283769337,100925954,2180939647,4037038160,1148730428,3123027871,3813386408,4087501137,4267549603,3229630528,2315620239,2906624658,3156319645,1215313976,82966005,3747855548,3245848246,1974459098,1665278241,807407632,451280895,251524083,1841287890,1283575245,337120268,891687699,801369324,3787349855,2721421207,3431482436,959321879,1469301956,4065699751,2197585534,1199193405,2898814052,3887750493,724703513,2514908019,2696962144,2551808385,3516813135,2141445340,1715741218,2119445034,2872807568,2198571144,3398190662,700968686,3547052216,1009259540,2041044702,3803995742,487983883,1991105499,1004265696,1449407026,1316239930,504629770,3683797321,168560134,1816667172,3837287516,1570751170,1857934291,4014189740,2797888098,2822345105,2754712981,936633572,2347923833,852879335,1133234376,1500395319,3084545389,2348912013,1689376213,3533459022,3762923945,3034082412,4205598294,133428468,634383082,2949277029,2398386810,3913789102,403703816,3580869306,2297460856,1867130149,1918643758,607656988,4049053350,3346248884,1368901318,600565992,2090982877,2632479860,557719327,3717614411,3697393085,2249034635,2232388234,2430627952,1115438654,3295786421,2865522278,3633334344,84280067,33027830,303828494,2747425121,1600795957,4188952407,3496589753,2434238086,1486471617,658119965,3106381470,953803233,334231800,3005978776,857870609,3151128937,1890179545,2298973838,2805175444,3056442267,574365214,2450884487,550103529,1233637070,4289353045,2018519080,2057691103,2399374476,4166623649,2148108681,387583245,3664101311,836232934,3330556482,3100665960,3280093505,2955516313,2002398509,287182607,3413881008,4238890068,3597515707,975967766],pe=[1671808611,2089089148,2006576759,2072901243,4061003762,1807603307,1873927791,3310653893,810573872,16974337,1739181671,729634347,4263110654,3613570519,2883997099,1989864566,3393556426,2191335298,3376449993,2106063485,4195741690,1508618841,1204391495,4027317232,2917941677,3563566036,2734514082,2951366063,2629772188,2767672228,1922491506,3227229120,3082974647,4246528509,2477669779,644500518,911895606,1061256767,4144166391,3427763148,878471220,2784252325,3845444069,4043897329,1905517169,3631459288,827548209,356461077,67897348,3344078279,593839651,3277757891,405286936,2527147926,84871685,2595565466,118033927,305538066,2157648768,3795705826,3945188843,661212711,2999812018,1973414517,152769033,2208177539,745822252,439235610,455947803,1857215598,1525593178,2700827552,1391895634,994932283,3596728278,3016654259,695947817,3812548067,795958831,2224493444,1408607827,3513301457,0,3979133421,543178784,4229948412,2982705585,1542305371,1790891114,3410398667,3201918910,961245753,1256100938,1289001036,1491644504,3477767631,3496721360,4012557807,2867154858,4212583931,1137018435,1305975373,861234739,2241073541,1171229253,4178635257,33948674,2139225727,1357946960,1011120188,2679776671,2833468328,1374921297,2751356323,1086357568,2408187279,2460827538,2646352285,944271416,4110742005,3168756668,3066132406,3665145818,560153121,271589392,4279952895,4077846003,3530407890,3444343245,202643468,322250259,3962553324,1608629855,2543990167,1154254916,389623319,3294073796,2817676711,2122513534,1028094525,1689045092,1575467613,422261273,1939203699,1621147744,2174228865,1339137615,3699352540,577127458,712922154,2427141008,2290289544,1187679302,3995715566,3100863416,339486740,3732514782,1591917662,186455563,3681988059,3762019296,844522546,978220090,169743370,1239126601,101321734,611076132,1558493276,3260915650,3547250131,2901361580,1655096418,2443721105,2510565781,3828863972,2039214713,3878868455,3359869896,928607799,1840765549,2374762893,3580146133,1322425422,2850048425,1823791212,1459268694,4094161908,3928346602,1706019429,2056189050,2934523822,135794696,3134549946,2022240376,628050469,779246638,472135708,2800834470,3032970164,3327236038,3894660072,3715932637,1956440180,522272287,1272813131,3185336765,2340818315,2323976074,1888542832,1044544574,3049550261,1722469478,1222152264,50660867,4127324150,236067854,1638122081,895445557,1475980887,3117443513,2257655686,3243809217,489110045,2662934430,3778599393,4162055160,2561878936,288563729,1773916777,3648039385,2391345038,2493985684,2612407707,505560094,2274497927,3911240169,3460925390,1442818645,678973480,3749357023,2358182796,2717407649,2306869641,219617805,3218761151,3862026214,1120306242,1756942440,1103331905,2578459033,762796589,252780047,2966125488,1425844308,3151392187,372911126],me=[1667474886,2088535288,2004326894,2071694838,4075949567,1802223062,1869591006,3318043793,808472672,16843522,1734846926,724270422,4278065639,3621216949,2880169549,1987484396,3402253711,2189597983,3385409673,2105378810,4210693615,1499065266,1195886990,4042263547,2913856577,3570689971,2728590687,2947541573,2627518243,2762274643,1920112356,3233831835,3082273397,4261223649,2475929149,640051788,909531756,1061110142,4160160501,3435941763,875846760,2779116625,3857003729,4059105529,1903268834,3638064043,825316194,353713962,67374088,3351728789,589522246,3284360861,404236336,2526454071,84217610,2593830191,117901582,303183396,2155911963,3806477791,3958056653,656894286,2998062463,1970642922,151591698,2206440989,741110872,437923380,454765878,1852748508,1515908788,2694904667,1381168804,993742198,3604373943,3014905469,690584402,3823320797,791638366,2223281939,1398011302,3520161977,0,3991743681,538992704,4244381667,2981218425,1532751286,1785380564,3419096717,3200178535,960056178,1246420628,1280103576,1482221744,3486468741,3503319995,4025428677,2863326543,4227536621,1128514950,1296947098,859002214,2240123921,1162203018,4193849577,33687044,2139062782,1347481760,1010582648,2678045221,2829640523,1364325282,2745433693,1077985408,2408548869,2459086143,2644360225,943212656,4126475505,3166494563,3065430391,3671750063,555836226,269496352,4294908645,4092792573,3537006015,3452783745,202118168,320025894,3974901699,1600119230,2543297077,1145359496,387397934,3301201811,2812801621,2122220284,1027426170,1684319432,1566435258,421079858,1936954854,1616945344,2172753945,1330631070,3705438115,572679748,707427924,2425400123,2290647819,1179044492,4008585671,3099120491,336870440,3739122087,1583276732,185277718,3688593069,3772791771,842159716,976899700,168435220,1229577106,101059084,606366792,1549591736,3267517855,3553849021,2897014595,1650632388,2442242105,2509612081,3840161747,2038008818,3890688725,3368567691,926374254,1835907034,2374863873,3587531953,1313788572,2846482505,1819063512,1448540844,4109633523,3941213647,1701162954,2054852340,2930698567,134748176,3132806511,2021165296,623210314,774795868,471606328,2795958615,3031746419,3334885783,3907527627,3722280097,1953799400,522133822,1263263126,3183336545,2341176845,2324333839,1886425312,1044267644,3048588401,1718004428,1212733584,50529542,4143317495,235803164,1633788866,892690282,1465383342,3115962473,2256965911,3250673817,488449850,2661202215,3789633753,4177007595,2560144171,286339874,1768537042,3654906025,2391705863,2492770099,2610673197,505291324,2273808917,3924369609,3469625735,1431699370,673740880,3755965093,2358021891,2711746649,2307489801,218961690,3217021541,3873845719,1111672452,1751693520,1094828930,2576986153,757954394,252645662,2964376443,1414855848,3149649517,370555436],ge=[1374988112,2118214995,437757123,975658646,1001089995,530400753,2902087851,1273168787,540080725,2910219766,2295101073,4110568485,1340463100,3307916247,641025152,3043140495,3736164937,632953703,1172967064,1576976609,3274667266,2169303058,2370213795,1809054150,59727847,361929877,3211623147,2505202138,3569255213,1484005843,1239443753,2395588676,1975683434,4102977912,2572697195,666464733,3202437046,4035489047,3374361702,2110667444,1675577880,3843699074,2538681184,1649639237,2976151520,3144396420,4269907996,4178062228,1883793496,2403728665,2497604743,1383856311,2876494627,1917518562,3810496343,1716890410,3001755655,800440835,2261089178,3543599269,807962610,599762354,33778362,3977675356,2328828971,2809771154,4077384432,1315562145,1708848333,101039829,3509871135,3299278474,875451293,2733856160,92987698,2767645557,193195065,1080094634,1584504582,3178106961,1042385657,2531067453,3711829422,1306967366,2438237621,1908694277,67556463,1615861247,429456164,3602770327,2302690252,1742315127,2968011453,126454664,3877198648,2043211483,2709260871,2084704233,4169408201,0,159417987,841739592,504459436,1817866830,4245618683,260388950,1034867998,908933415,168810852,1750902305,2606453969,607530554,202008497,2472011535,3035535058,463180190,2160117071,1641816226,1517767529,470948374,3801332234,3231722213,1008918595,303765277,235474187,4069246893,766945465,337553864,1475418501,2943682380,4003061179,2743034109,4144047775,1551037884,1147550661,1543208500,2336434550,3408119516,3069049960,3102011747,3610369226,1113818384,328671808,2227573024,2236228733,3535486456,2935566865,3341394285,496906059,3702665459,226906860,2009195472,733156972,2842737049,294930682,1206477858,2835123396,2700099354,1451044056,573804783,2269728455,3644379585,2362090238,2564033334,2801107407,2776292904,3669462566,1068351396,742039012,1350078989,1784663195,1417561698,4136440770,2430122216,775550814,2193862645,2673705150,1775276924,1876241833,3475313331,3366754619,270040487,3902563182,3678124923,3441850377,1851332852,3969562369,2203032232,3868552805,2868897406,566021896,4011190502,3135740889,1248802510,3936291284,699432150,832877231,708780849,3332740144,899835584,1951317047,4236429990,3767586992,866637845,4043610186,1106041591,2144161806,395441711,1984812685,1139781709,3433712980,3835036895,2664543715,1282050075,3240894392,1181045119,2640243204,25965917,4203181171,4211818798,3009879386,2463879762,3910161971,1842759443,2597806476,933301370,1509430414,3943906441,3467192302,3076639029,3776767469,2051518780,2631065433,1441952575,404016761,1942435775,1408749034,1610459739,3745345300,2017778566,3400528769,3110650942,941896748,3265478751,371049330,3168937228,675039627,4279080257,967311729,135050206,3635733660,1683407248,2076935265,3576870512,1215061108,3501741890],De=[1347548327,1400783205,3273267108,2520393566,3409685355,4045380933,2880240216,2471224067,1428173050,4138563181,2441661558,636813900,4233094615,3620022987,2149987652,2411029155,1239331162,1730525723,2554718734,3781033664,46346101,310463728,2743944855,3328955385,3875770207,2501218972,3955191162,3667219033,768917123,3545789473,692707433,1150208456,1786102409,2029293177,1805211710,3710368113,3065962831,401639597,1724457132,3028143674,409198410,2196052529,1620529459,1164071807,3769721975,2226875310,486441376,2499348523,1483753576,428819965,2274680428,3075636216,598438867,3799141122,1474502543,711349675,129166120,53458370,2592523643,2782082824,4063242375,2988687269,3120694122,1559041666,730517276,2460449204,4042459122,2706270690,3446004468,3573941694,533804130,2328143614,2637442643,2695033685,839224033,1973745387,957055980,2856345839,106852767,1371368976,4181598602,1033297158,2933734917,1179510461,3046200461,91341917,1862534868,4284502037,605657339,2547432937,3431546947,2003294622,3182487618,2282195339,954669403,3682191598,1201765386,3917234703,3388507166,0,2198438022,1211247597,2887651696,1315723890,4227665663,1443857720,507358933,657861945,1678381017,560487590,3516619604,975451694,2970356327,261314535,3535072918,2652609425,1333838021,2724322336,1767536459,370938394,182621114,3854606378,1128014560,487725847,185469197,2918353863,3106780840,3356761769,2237133081,1286567175,3152976349,4255350624,2683765030,3160175349,3309594171,878443390,1988838185,3704300486,1756818940,1673061617,3403100636,272786309,1075025698,545572369,2105887268,4174560061,296679730,1841768865,1260232239,4091327024,3960309330,3497509347,1814803222,2578018489,4195456072,575138148,3299409036,446754879,3629546796,4011996048,3347532110,3252238545,4270639778,915985419,3483825537,681933534,651868046,2755636671,3828103837,223377554,2607439820,1649704518,3270937875,3901806776,1580087799,4118987695,3198115200,2087309459,2842678573,3016697106,1003007129,2802849917,1860738147,2077965243,164439672,4100872472,32283319,2827177882,1709610350,2125135846,136428751,3874428392,3652904859,3460984630,3572145929,3593056380,2939266226,824852259,818324884,3224740454,930369212,2801566410,2967507152,355706840,1257309336,4148292826,243256656,790073846,2373340630,1296297904,1422699085,3756299780,3818836405,457992840,3099667487,2135319889,77422314,1560382517,1945798516,788204353,1521706781,1385356242,870912086,325965383,2358957921,2050466060,2388260884,2313884476,4006521127,901210569,3990953189,1014646705,1503449823,1062597235,2031621326,3212035895,3931371469,1533017514,350174575,2256028891,2177544179,1052338372,741876788,1606591296,1914052035,213705253,2334669897,1107234197,1899603969,3725069491,2631447780,2422494913,1635502980,1893020342,1950903388,1120974935],Ce=[2807058932,1699970625,2764249623,1586903591,1808481195,1173430173,1487645946,59984867,4199882800,1844882806,1989249228,1277555970,3623636965,3419915562,1149249077,2744104290,1514790577,459744698,244860394,3235995134,1963115311,4027744588,2544078150,4190530515,1608975247,2627016082,2062270317,1507497298,2200818878,567498868,1764313568,3359936201,2305455554,2037970062,1047239e3,1910319033,1337376481,2904027272,2892417312,984907214,1243112415,830661914,861968209,2135253587,2011214180,2927934315,2686254721,731183368,1750626376,4246310725,1820824798,4172763771,3542330227,48394827,2404901663,2871682645,671593195,3254988725,2073724613,145085239,2280796200,2779915199,1790575107,2187128086,472615631,3029510009,4075877127,3802222185,4107101658,3201631749,1646252340,4270507174,1402811438,1436590835,3778151818,3950355702,3963161475,4020912224,2667994737,273792366,2331590177,104699613,95345982,3175501286,2377486676,1560637892,3564045318,369057872,4213447064,3919042237,1137477952,2658625497,1119727848,2340947849,1530455833,4007360968,172466556,266959938,516552836,0,2256734592,3980931627,1890328081,1917742170,4294704398,945164165,3575528878,958871085,3647212047,2787207260,1423022939,775562294,1739656202,3876557655,2530391278,2443058075,3310321856,547512796,1265195639,437656594,3121275539,719700128,3762502690,387781147,218828297,3350065803,2830708150,2848461854,428169201,122466165,3720081049,1627235199,648017665,4122762354,1002783846,2117360635,695634755,3336358691,4234721005,4049844452,3704280881,2232435299,574624663,287343814,612205898,1039717051,840019705,2708326185,793451934,821288114,1391201670,3822090177,376187827,3113855344,1224348052,1679968233,2361698556,1058709744,752375421,2431590963,1321699145,3519142200,2734591178,188127444,2177869557,3727205754,2384911031,3215212461,2648976442,2450346104,3432737375,1180849278,331544205,3102249176,4150144569,2952102595,2159976285,2474404304,766078933,313773861,2570832044,2108100632,1668212892,3145456443,2013908262,418672217,3070356634,2594734927,1852171925,3867060991,3473416636,3907448597,2614737639,919489135,164948639,2094410160,2997825956,590424639,2486224549,1723872674,3157750862,3399941250,3501252752,3625268135,2555048196,3673637356,1343127501,4130281361,3599595085,2957853679,1297403050,81781910,3051593425,2283490410,532201772,1367295589,3926170974,895287692,1953757831,1093597963,492483431,3528626907,1446242576,1192455638,1636604631,209336225,344873464,1015671571,669961897,3375740769,3857572124,2973530695,3747192018,1933530610,3464042516,935293895,3454686199,2858115069,1863638845,3683022916,4085369519,3292445032,875313188,1080017571,3279033885,621591778,1233856572,2504130317,24197544,3017672716,3835484340,3247465558,2220981195,3060847922,1551124588,1463996600],we=[4104605777,1097159550,396673818,660510266,2875968315,2638606623,4200115116,3808662347,821712160,1986918061,3430322568,38544885,3856137295,718002117,893681702,1654886325,2975484382,3122358053,3926825029,4274053469,796197571,1290801793,1184342925,3556361835,2405426947,2459735317,1836772287,1381620373,3196267988,1948373848,3764988233,3385345166,3263785589,2390325492,1480485785,3111247143,3780097726,2293045232,548169417,3459953789,3746175075,439452389,1362321559,1400849762,1685577905,1806599355,2174754046,137073913,1214797936,1174215055,3731654548,2079897426,1943217067,1258480242,529487843,1437280870,3945269170,3049390895,3313212038,923313619,679998e3,3215307299,57326082,377642221,3474729866,2041877159,133361907,1776460110,3673476453,96392454,878845905,2801699524,777231668,4082475170,2330014213,4142626212,2213296395,1626319424,1906247262,1846563261,562755902,3708173718,1040559837,3871163981,1418573201,3294430577,114585348,1343618912,2566595609,3186202582,1078185097,3651041127,3896688048,2307622919,425408743,3371096953,2081048481,1108339068,2216610296,0,2156299017,736970802,292596766,1517440620,251657213,2235061775,2933202493,758720310,265905162,1554391400,1532285339,908999204,174567692,1474760595,4002861748,2610011675,3234156416,3693126241,2001430874,303699484,2478443234,2687165888,585122620,454499602,151849742,2345119218,3064510765,514443284,4044981591,1963412655,2581445614,2137062819,19308535,1928707164,1715193156,4219352155,1126790795,600235211,3992742070,3841024952,836553431,1669664834,2535604243,3323011204,1243905413,3141400786,4180808110,698445255,2653899549,2989552604,2253581325,3252932727,3004591147,1891211689,2487810577,3915653703,4237083816,4030667424,2100090966,865136418,1229899655,953270745,3399679628,3557504664,4118925222,2061379749,3079546586,2915017791,983426092,2022837584,1607244650,2118541908,2366882550,3635996816,972512814,3283088770,1568718495,3499326569,3576539503,621982671,2895723464,410887952,2623762152,1002142683,645401037,1494807662,2595684844,1335535747,2507040230,4293295786,3167684641,367585007,3885750714,1865862730,2668221674,2960971305,2763173681,1059270954,2777952454,2724642869,1320957812,2194319100,2429595872,2815956275,77089521,3973773121,3444575871,2448830231,1305906550,4021308739,2857194700,2516901860,3518358430,1787304780,740276417,1699839814,1592394909,2352307457,2272556026,188821243,1729977011,3687994002,274084841,3594982253,3613494426,2701949495,4162096729,322734571,2837966542,1640576439,484830689,1202797690,3537852828,4067639125,349075736,3342319475,4157467219,4255800159,1030690015,1155237496,2951971274,1757691577,607398968,2738905026,499347990,3794078908,1011452712,227885567,2818666809,213114376,3034881240,1455525988,3414450555,850817237,1817998408,3092726480],xe=[0,235474187,470948374,303765277,941896748,908933415,607530554,708780849,1883793496,2118214995,1817866830,1649639237,1215061108,1181045119,1417561698,1517767529,3767586992,4003061179,4236429990,4069246893,3635733660,3602770327,3299278474,3400528769,2430122216,2664543715,2362090238,2193862645,2835123396,2801107407,3035535058,3135740889,3678124923,3576870512,3341394285,3374361702,3810496343,3977675356,4279080257,4043610186,2876494627,2776292904,3076639029,3110650942,2472011535,2640243204,2403728665,2169303058,1001089995,899835584,666464733,699432150,59727847,226906860,530400753,294930682,1273168787,1172967064,1475418501,1509430414,1942435775,2110667444,1876241833,1641816226,2910219766,2743034109,2976151520,3211623147,2505202138,2606453969,2302690252,2269728455,3711829422,3543599269,3240894392,3475313331,3843699074,3943906441,4178062228,4144047775,1306967366,1139781709,1374988112,1610459739,1975683434,2076935265,1775276924,1742315127,1034867998,866637845,566021896,800440835,92987698,193195065,429456164,395441711,1984812685,2017778566,1784663195,1683407248,1315562145,1080094634,1383856311,1551037884,101039829,135050206,437757123,337553864,1042385657,807962610,573804783,742039012,2531067453,2564033334,2328828971,2227573024,2935566865,2700099354,3001755655,3168937228,3868552805,3902563182,4203181171,4102977912,3736164937,3501741890,3265478751,3433712980,1106041591,1340463100,1576976609,1408749034,2043211483,2009195472,1708848333,1809054150,832877231,1068351396,766945465,599762354,159417987,126454664,361929877,463180190,2709260871,2943682380,3178106961,3009879386,2572697195,2538681184,2236228733,2336434550,3509871135,3745345300,3441850377,3274667266,3910161971,3877198648,4110568485,4211818798,2597806476,2497604743,2261089178,2295101073,2733856160,2902087851,3202437046,2968011453,3936291284,3835036895,4136440770,4169408201,3535486456,3702665459,3467192302,3231722213,2051518780,1951317047,1716890410,1750902305,1113818384,1282050075,1584504582,1350078989,168810852,67556463,371049330,404016761,841739592,1008918595,775550814,540080725,3969562369,3801332234,4035489047,4269907996,3569255213,3669462566,3366754619,3332740144,2631065433,2463879762,2160117071,2395588676,2767645557,2868897406,3102011747,3069049960,202008497,33778362,270040487,504459436,875451293,975658646,675039627,641025152,2084704233,1917518562,1615861247,1851332852,1147550661,1248802510,1484005843,1451044056,933301370,967311729,733156972,632953703,260388950,25965917,328671808,496906059,1206477858,1239443753,1543208500,1441952575,2144161806,1908694277,1675577880,1842759443,3610369226,3644379585,3408119516,3307916247,4011190502,3776767469,4077384432,4245618683,2809771154,2842737049,3144396420,3043140495,2673705150,2438237621,2203032232,2370213795],Re=[0,185469197,370938394,487725847,741876788,657861945,975451694,824852259,1483753576,1400783205,1315723890,1164071807,1950903388,2135319889,1649704518,1767536459,2967507152,3152976349,2801566410,2918353863,2631447780,2547432937,2328143614,2177544179,3901806776,3818836405,4270639778,4118987695,3299409036,3483825537,3535072918,3652904859,2077965243,1893020342,1841768865,1724457132,1474502543,1559041666,1107234197,1257309336,598438867,681933534,901210569,1052338372,261314535,77422314,428819965,310463728,3409685355,3224740454,3710368113,3593056380,3875770207,3960309330,4045380933,4195456072,2471224067,2554718734,2237133081,2388260884,3212035895,3028143674,2842678573,2724322336,4138563181,4255350624,3769721975,3955191162,3667219033,3516619604,3431546947,3347532110,2933734917,2782082824,3099667487,3016697106,2196052529,2313884476,2499348523,2683765030,1179510461,1296297904,1347548327,1533017514,1786102409,1635502980,2087309459,2003294622,507358933,355706840,136428751,53458370,839224033,957055980,605657339,790073846,2373340630,2256028891,2607439820,2422494913,2706270690,2856345839,3075636216,3160175349,3573941694,3725069491,3273267108,3356761769,4181598602,4063242375,4011996048,3828103837,1033297158,915985419,730517276,545572369,296679730,446754879,129166120,213705253,1709610350,1860738147,1945798516,2029293177,1239331162,1120974935,1606591296,1422699085,4148292826,4233094615,3781033664,3931371469,3682191598,3497509347,3446004468,3328955385,2939266226,2755636671,3106780840,2988687269,2198438022,2282195339,2501218972,2652609425,1201765386,1286567175,1371368976,1521706781,1805211710,1620529459,2105887268,1988838185,533804130,350174575,164439672,46346101,870912086,954669403,636813900,788204353,2358957921,2274680428,2592523643,2441661558,2695033685,2880240216,3065962831,3182487618,3572145929,3756299780,3270937875,3388507166,4174560061,4091327024,4006521127,3854606378,1014646705,930369212,711349675,560487590,272786309,457992840,106852767,223377554,1678381017,1862534868,1914052035,2031621326,1211247597,1128014560,1580087799,1428173050,32283319,182621114,401639597,486441376,768917123,651868046,1003007129,818324884,1503449823,1385356242,1333838021,1150208456,1973745387,2125135846,1673061617,1756818940,2970356327,3120694122,2802849917,2887651696,2637442643,2520393566,2334669897,2149987652,3917234703,3799141122,4284502037,4100872472,3309594171,3460984630,3545789473,3629546796,2050466060,1899603969,1814803222,1730525723,1443857720,1560382517,1075025698,1260232239,575138148,692707433,878443390,1062597235,243256656,91341917,409198410,325965383,3403100636,3252238545,3704300486,3620022987,3874428392,3990953189,4042459122,4227665663,2460449204,2578018489,2226875310,2411029155,3198115200,3046200461,2827177882,2743944855],Be=[0,218828297,437656594,387781147,875313188,958871085,775562294,590424639,1750626376,1699970625,1917742170,2135253587,1551124588,1367295589,1180849278,1265195639,3501252752,3720081049,3399941250,3350065803,3835484340,3919042237,4270507174,4085369519,3102249176,3051593425,2734591178,2952102595,2361698556,2177869557,2530391278,2614737639,3145456443,3060847922,2708326185,2892417312,2404901663,2187128086,2504130317,2555048196,3542330227,3727205754,3375740769,3292445032,3876557655,3926170974,4246310725,4027744588,1808481195,1723872674,1910319033,2094410160,1608975247,1391201670,1173430173,1224348052,59984867,244860394,428169201,344873464,935293895,984907214,766078933,547512796,1844882806,1627235199,2011214180,2062270317,1507497298,1423022939,1137477952,1321699145,95345982,145085239,532201772,313773861,830661914,1015671571,731183368,648017665,3175501286,2957853679,2807058932,2858115069,2305455554,2220981195,2474404304,2658625497,3575528878,3625268135,3473416636,3254988725,3778151818,3963161475,4213447064,4130281361,3599595085,3683022916,3432737375,3247465558,3802222185,4020912224,4172763771,4122762354,3201631749,3017672716,2764249623,2848461854,2331590177,2280796200,2431590963,2648976442,104699613,188127444,472615631,287343814,840019705,1058709744,671593195,621591778,1852171925,1668212892,1953757831,2037970062,1514790577,1463996600,1080017571,1297403050,3673637356,3623636965,3235995134,3454686199,4007360968,3822090177,4107101658,4190530515,2997825956,3215212461,2830708150,2779915199,2256734592,2340947849,2627016082,2443058075,172466556,122466165,273792366,492483431,1047239e3,861968209,612205898,695634755,1646252340,1863638845,2013908262,1963115311,1446242576,1530455833,1277555970,1093597963,1636604631,1820824798,2073724613,1989249228,1436590835,1487645946,1337376481,1119727848,164948639,81781910,331544205,516552836,1039717051,821288114,669961897,719700128,2973530695,3157750862,2871682645,2787207260,2232435299,2283490410,2667994737,2450346104,3647212047,3564045318,3279033885,3464042516,3980931627,3762502690,4150144569,4199882800,3070356634,3121275539,2904027272,2686254721,2200818878,2384911031,2570832044,2486224549,3747192018,3528626907,3310321856,3359936201,3950355702,3867060991,4049844452,4234721005,1739656202,1790575107,2108100632,1890328081,1402811438,1586903591,1233856572,1149249077,266959938,48394827,369057872,418672217,1002783846,919489135,567498868,752375421,209336225,24197544,376187827,459744698,945164165,895287692,574624663,793451934,1679968233,1764313568,2117360635,1933530610,1343127501,1560637892,1243112415,1192455638,3704280881,3519142200,3336358691,3419915562,3907448597,3857572124,4075877127,4294704398,3029510009,3113855344,2927934315,2744104290,2159976285,2377486676,2594734927,2544078150],Se=[0,151849742,303699484,454499602,607398968,758720310,908999204,1059270954,1214797936,1097159550,1517440620,1400849762,1817998408,1699839814,2118541908,2001430874,2429595872,2581445614,2194319100,2345119218,3034881240,3186202582,2801699524,2951971274,3635996816,3518358430,3399679628,3283088770,4237083816,4118925222,4002861748,3885750714,1002142683,850817237,698445255,548169417,529487843,377642221,227885567,77089521,1943217067,2061379749,1640576439,1757691577,1474760595,1592394909,1174215055,1290801793,2875968315,2724642869,3111247143,2960971305,2405426947,2253581325,2638606623,2487810577,3808662347,3926825029,4044981591,4162096729,3342319475,3459953789,3576539503,3693126241,1986918061,2137062819,1685577905,1836772287,1381620373,1532285339,1078185097,1229899655,1040559837,923313619,740276417,621982671,439452389,322734571,137073913,19308535,3871163981,4021308739,4104605777,4255800159,3263785589,3414450555,3499326569,3651041127,2933202493,2815956275,3167684641,3049390895,2330014213,2213296395,2566595609,2448830231,1305906550,1155237496,1607244650,1455525988,1776460110,1626319424,2079897426,1928707164,96392454,213114376,396673818,514443284,562755902,679998e3,865136418,983426092,3708173718,3557504664,3474729866,3323011204,4180808110,4030667424,3945269170,3794078908,2507040230,2623762152,2272556026,2390325492,2975484382,3092726480,2738905026,2857194700,3973773121,3856137295,4274053469,4157467219,3371096953,3252932727,3673476453,3556361835,2763173681,2915017791,3064510765,3215307299,2156299017,2307622919,2459735317,2610011675,2081048481,1963412655,1846563261,1729977011,1480485785,1362321559,1243905413,1126790795,878845905,1030690015,645401037,796197571,274084841,425408743,38544885,188821243,3613494426,3731654548,3313212038,3430322568,4082475170,4200115116,3780097726,3896688048,2668221674,2516901860,2366882550,2216610296,3141400786,2989552604,2837966542,2687165888,1202797690,1320957812,1437280870,1554391400,1669664834,1787304780,1906247262,2022837584,265905162,114585348,499347990,349075736,736970802,585122620,972512814,821712160,2595684844,2478443234,2293045232,2174754046,3196267988,3079546586,2895723464,2777952454,3537852828,3687994002,3234156416,3385345166,4142626212,4293295786,3841024952,3992742070,174567692,57326082,410887952,292596766,777231668,660510266,1011452712,893681702,1108339068,1258480242,1343618912,1494807662,1715193156,1865862730,1948373848,2100090966,2701949495,2818666809,3004591147,3122358053,2235061775,2352307457,2535604243,2653899549,3915653703,3764988233,4219352155,4067639125,3444575871,3294430577,3746175075,3594982253,836553431,953270745,600235211,718002117,367585007,484830689,133361907,251657213,2041877159,1891211689,1806599355,1654886325,1568718495,1418573201,1335535747,1184342925];function Te(ke){for(var Ve=[],ze=0;ze<ke.length;ze+=4)Ve.push(ke[ze]<<24|ke[ze+1]<<16|ke[ze+2]<<8|ke[ze+3]);return Ve}var Ae=function(ke){if(!(this instanceof Ae))throw Error("AES must be instanitated with `new`");Object.defineProperty(this,"key",{value:te(ke,!0)}),this._prepare()};Ae.prototype._prepare=function(){var ke=se[this.key.length];if(ke==null)throw new Error("invalid key size (must be 16, 24 or 32 bytes)");this._Ke=[],this._Kd=[];for(var Ve=0;Ve<=ke;Ve++)this._Ke.push([0,0,0,0]),this._Kd.push([0,0,0,0]);for(var ze=(ke+1)*4,Ue=this.key.length/4,Oe=Te(this.key),Dt,Ve=0;Ve<Ue;Ve++)Dt=Ve>>2,this._Ke[Dt][Ve%4]=Oe[Ve],this._Kd[ke-Dt][Ve%4]=Oe[Ve];for(var $t=0,Mt=Ue,Kt;Mt<ze;){if(Kt=Oe[Ue-1],Oe[0]^=le[Kt>>16&255]<<24^le[Kt>>8&255]<<16^le[Kt&255]<<8^le[Kt>>24&255]^ue[$t]<<24,$t+=1,Ue!=8)for(var Ve=1;Ve<Ue;Ve++)Oe[Ve]^=Oe[Ve-1];else{for(var Ve=1;Ve<Ue/2;Ve++)Oe[Ve]^=Oe[Ve-1];Kt=Oe[Ue/2-1],Oe[Ue/2]^=le[Kt&255]^le[Kt>>8&255]<<8^le[Kt>>16&255]<<16^le[Kt>>24&255]<<24;for(var Ve=Ue/2+1;Ve<Ue;Ve++)Oe[Ve]^=Oe[Ve-1]}for(var Ve=0,Vt,Ht;Ve<Ue&&Mt<ze;)Vt=Mt>>2,Ht=Mt%4,this._Ke[Vt][Ht]=Oe[Ve],this._Kd[ke-Vt][Ht]=Oe[Ve++],Mt++}for(var Vt=1;Vt<ke;Vt++)for(var Ht=0;Ht<4;Ht++)Kt=this._Kd[Vt][Ht],this._Kd[Vt][Ht]=xe[Kt>>24&255]^Re[Kt>>16&255]^Be[Kt>>8&255]^Se[Kt&255]},Ae.prototype.encrypt=function(ke){if(ke.length!=16)throw new Error("invalid plaintext size (must be 16 bytes)");for(var Ve=this._Ke.length-1,ze=[0,0,0,0],Ue=Te(ke),Oe=0;Oe<4;Oe++)Ue[Oe]^=this._Ke[0][Oe];for(var Dt=1;Dt<Ve;Dt++){for(var Oe=0;Oe<4;Oe++)ze[Oe]=de[Ue[Oe]>>24&255]^fe[Ue[(Oe+1)%4]>>16&255]^pe[Ue[(Oe+2)%4]>>8&255]^me[Ue[(Oe+3)%4]&255]^this._Ke[Dt][Oe];Ue=ze.slice()}for(var $t=ae(16),Mt,Oe=0;Oe<4;Oe++)Mt=this._Ke[Ve][Oe],$t[4*Oe]=(le[Ue[Oe]>>24&255]^Mt>>24)&255,$t[4*Oe+1]=(le[Ue[(Oe+1)%4]>>16&255]^Mt>>16)&255,$t[4*Oe+2]=(le[Ue[(Oe+2)%4]>>8&255]^Mt>>8)&255,$t[4*Oe+3]=(le[Ue[(Oe+3)%4]&255]^Mt)&255;return $t},Ae.prototype.decrypt=function(ke){if(ke.length!=16)throw new Error("invalid ciphertext size (must be 16 bytes)");for(var Ve=this._Kd.length-1,ze=[0,0,0,0],Ue=Te(ke),Oe=0;Oe<4;Oe++)Ue[Oe]^=this._Kd[0][Oe];for(var Dt=1;Dt<Ve;Dt++){for(var Oe=0;Oe<4;Oe++)ze[Oe]=ge[Ue[Oe]>>24&255]^De[Ue[(Oe+3)%4]>>16&255]^Ce[Ue[(Oe+2)%4]>>8&255]^we[Ue[(Oe+1)%4]&255]^this._Kd[Dt][Oe];Ue=ze.slice()}for(var $t=ae(16),Mt,Oe=0;Oe<4;Oe++)Mt=this._Kd[Ve][Oe],$t[4*Oe]=(ce[Ue[Oe]>>24&255]^Mt>>24)&255,$t[4*Oe+1]=(ce[Ue[(Oe+3)%4]>>16&255]^Mt>>16)&255,$t[4*Oe+2]=(ce[Ue[(Oe+2)%4]>>8&255]^Mt>>8)&255,$t[4*Oe+3]=(ce[Ue[(Oe+1)%4]&255]^Mt)&255;return $t};var he=function(ke){if(!(this instanceof he))throw Error("AES must be instanitated with `new`");this.description="Electronic Code Block",this.name="ecb",this._aes=new Ae(ke)};he.prototype.encrypt=function(ke){if(ke=te(ke),ke.length%16!==0)throw new Error("invalid plaintext size (must be multiple of 16 bytes)");for(var Ve=ae(ke.length),ze=ae(16),Ue=0;Ue<ke.length;Ue+=16)ne(ke,ze,0,Ue,Ue+16),ze=this._aes.encrypt(ze),ne(ze,Ve,Ue);return Ve},he.prototype.decrypt=function(ke){if(ke=te(ke),ke.length%16!==0)throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");for(var Ve=ae(ke.length),ze=ae(16),Ue=0;Ue<ke.length;Ue+=16)ne(ke,ze,0,Ue,Ue+16),ze=this._aes.decrypt(ze),ne(ze,Ve,Ue);return Ve};var ve=function(ke,Ve){if(!(this instanceof ve))throw Error("AES must be instanitated with `new`");if(this.description="Cipher Block Chaining",this.name="cbc",!Ve)Ve=ae(16);else if(Ve.length!=16)throw new Error("invalid initialation vector size (must be 16 bytes)");this._lastCipherblock=te(Ve,!0),this._aes=new Ae(ke)};ve.prototype.encrypt=function(ke){if(ke=te(ke),ke.length%16!==0)throw new Error("invalid plaintext size (must be multiple of 16 bytes)");for(var Ve=ae(ke.length),ze=ae(16),Ue=0;Ue<ke.length;Ue+=16){ne(ke,ze,0,Ue,Ue+16);for(var Oe=0;Oe<16;Oe++)ze[Oe]^=this._lastCipherblock[Oe];this._lastCipherblock=this._aes.encrypt(ze),ne(this._lastCipherblock,Ve,Ue)}return Ve},ve.prototype.decrypt=function(ke){if(ke=te(ke),ke.length%16!==0)throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");for(var Ve=ae(ke.length),ze=ae(16),Ue=0;Ue<ke.length;Ue+=16){ne(ke,ze,0,Ue,Ue+16),ze=this._aes.decrypt(ze);for(var Oe=0;Oe<16;Oe++)Ve[Ue+Oe]=ze[Oe]^this._lastCipherblock[Oe];ne(ke,this._lastCipherblock,0,Ue,Ue+16)}return Ve};var ye=function(ke,Ve,ze){if(!(this instanceof ye))throw Error("AES must be instanitated with `new`");if(this.description="Cipher Feedback",this.name="cfb",!Ve)Ve=ae(16);else if(Ve.length!=16)throw new Error("invalid initialation vector size (must be 16 size)");ze||(ze=1),this.segmentSize=ze,this._shiftRegister=te(Ve,!0),this._aes=new Ae(ke)};ye.prototype.encrypt=function(ke){if(ke.length%this.segmentSize!=0)throw new Error("invalid plaintext size (must be segmentSize bytes)");for(var Ve=te(ke,!0),ze,Ue=0;Ue<Ve.length;Ue+=this.segmentSize){ze=this._aes.encrypt(this._shiftRegister);for(var Oe=0;Oe<this.segmentSize;Oe++)Ve[Ue+Oe]^=ze[Oe];ne(this._shiftRegister,this._shiftRegister,0,this.segmentSize),ne(Ve,this._shiftRegister,16-this.segmentSize,Ue,Ue+this.segmentSize)}return Ve},ye.prototype.decrypt=function(ke){if(ke.length%this.segmentSize!=0)throw new Error("invalid ciphertext size (must be segmentSize bytes)");for(var Ve=te(ke,!0),ze,Ue=0;Ue<Ve.length;Ue+=this.segmentSize){ze=this._aes.encrypt(this._shiftRegister);for(var Oe=0;Oe<this.segmentSize;Oe++)Ve[Ue+Oe]^=ze[Oe];ne(this._shiftRegister,this._shiftRegister,0,this.segmentSize),ne(ke,this._shiftRegister,16-this.segmentSize,Ue,Ue+this.segmentSize)}return Ve};var be=function(ke,Ve){if(!(this instanceof be))throw Error("AES must be instanitated with `new`");if(this.description="Output Feedback",this.name="ofb",!Ve)Ve=ae(16);else if(Ve.length!=16)throw new Error("invalid initialation vector size (must be 16 bytes)");this._lastPrecipher=te(Ve,!0),this._lastPrecipherIndex=16,this._aes=new Ae(ke)};be.prototype.encrypt=function(ke){for(var Ve=te(ke,!0),ze=0;ze<Ve.length;ze++)this._lastPrecipherIndex===16&&(this._lastPrecipher=this._aes.encrypt(this._lastPrecipher),this._lastPrecipherIndex=0),Ve[ze]^=this._lastPrecipher[this._lastPrecipherIndex++];return Ve},be.prototype.decrypt=be.prototype.encrypt;var _e=function(ke){if(!(this instanceof _e))throw Error("Counter must be instanitated with `new`");ke!==0&&!ke&&(ke=1),typeof ke=="number"?(this._counter=ae(16),this.setValue(ke)):this.setBytes(ke)};_e.prototype.setValue=function(ke){if(typeof ke!="number"||parseInt(ke)!=ke)throw new Error("invalid counter value (must be an integer)");for(var Ve=15;Ve>=0;--Ve)this._counter[Ve]=ke%256,ke=ke>>8},_e.prototype.setBytes=function(ke){if(ke=te(ke,!0),ke.length!=16)throw new Error("invalid counter bytes size (must be 16 bytes)");this._counter=ke},_e.prototype.increment=function(){for(var ke=15;ke>=0;ke--)if(this._counter[ke]===255)this._counter[ke]=0;else{this._counter[ke]++;break}};var Me=function(ke,Ve){if(!(this instanceof Me))throw Error("AES must be instanitated with `new`");this.description="Counter",this.name="ctr",Ve instanceof _e||(Ve=new _e(Ve)),this._counter=Ve,this._remainingCounter=null,this._remainingCounterIndex=16,this._aes=new Ae(ke)};Me.prototype.encrypt=function(ke){for(var Ve=te(ke,!0),ze=0;ze<Ve.length;ze++)this._remainingCounterIndex===16&&(this._remainingCounter=this._aes.encrypt(this._counter._counter),this._remainingCounterIndex=0,this._counter.increment()),Ve[ze]^=this._remainingCounter[this._remainingCounterIndex++];return Ve},Me.prototype.decrypt=Me.prototype.encrypt;function Ie(ke){ke=te(ke,!0);var Ve=16-ke.length%16,ze=ae(ke.length+Ve);ne(ke,ze);for(var Ue=ke.length;Ue<ze.length;Ue++)ze[Ue]=Ve;return ze}function Fe(ke){if(ke=te(ke,!0),ke.length<16)throw new Error("PKCS#7 invalid length");var Ve=ke[ke.length-1];if(Ve>16)throw new Error("PKCS#7 padding byte out of range");for(var ze=ke.length-Ve,Ue=0;Ue<Ve;Ue++)if(ke[ze+Ue]!==Ve)throw new Error("PKCS#7 invalid padding byte");var Oe=ae(ze);return ne(ke,Oe,0,0,ze),Oe}var Ee={AES:Ae,Counter:_e,ModeOfOperation:{ecb:he,cbc:ve,cfb:ye,ofb:be,ctr:Me},utils:{hex:ie,utf8:oe},padding:{pkcs7:{pad:Ie,strip:Fe}},_arrayTest:{coerceArray:te,createArray:ae,copyArray:ne}};n.exports=Ee})()}(aesJs)),aesJs.exports}var aesJsExports=requireAesJs();const aes$2=getDefaultExportFromCjs(aesJsExports),version$d="json-wallets/5.7.0";function looseArrayify(n){return typeof n=="string"&&n.substring(0,2)!=="0x"&&(n="0x"+n),arrayify(n)}function zpad(n,t){for(n=String(n);n.length<t;)n="0"+n;return n}function getPassword(n){return typeof n=="string"?toUtf8Bytes(n,UnicodeNormalizationForm.NFKC):arrayify(n)}function searchPath(n,t){let u=n;const c=t.toLowerCase().split("/");for(let ee=0;ee<c.length;ee++){let te=null;for(const ae in u)if(ae.toLowerCase()===c[ee]){te=u[ae];break}if(te===null)return null;u=te}return u}function uuidV4(n){const t=arrayify(n);t[6]=t[6]&15|64,t[8]=t[8]&63|128;const u=hexlify(t);return[u.substring(2,10),u.substring(10,14),u.substring(14,18),u.substring(18,22),u.substring(22,34)].join("-")}const logger$m=new Logger(version$d);class CrowdsaleAccount extends Description{isCrowdsaleAccount(t){return!!(t&&t._isCrowdsaleAccount)}}function decrypt$1(n,t){const u=JSON.parse(n);t=getPassword(t);const c=getAddress(searchPath(u,"ethaddr")),ee=looseArrayify(searchPath(u,"encseed"));(!ee||ee.length%16!==0)&&logger$m.throwArgumentError("invalid encseed","json",n);const te=arrayify(pbkdf2$3(t,t,2e3,32,"sha256")).slice(0,16),ae=ee.slice(0,16),ne=ee.slice(16),oe=new aes$2.ModeOfOperation.cbc(te,ae),ie=aes$2.padding.pkcs7.strip(arrayify(oe.decrypt(ne)));let se="";for(let ce=0;ce<ie.length;ce++)se+=String.fromCharCode(ie[ce]);const ue=toUtf8Bytes(se),le=keccak256$1(ue);return new CrowdsaleAccount({_isCrowdsaleAccount:!0,address:c,privateKey:le})}function isCrowdsaleWallet(n){let t=null;try{t=JSON.parse(n)}catch{return!1}return t.encseed&&t.ethaddr}function isKeystoreWallet(n){let t=null;try{t=JSON.parse(n)}catch{return!1}return!(!t.version||parseInt(t.version)!==t.version||parseInt(t.version)!==3)}function getJsonWalletAddress(n){if(isCrowdsaleWallet(n))try{return getAddress(JSON.parse(n).ethaddr)}catch{return null}if(isKeystoreWallet(n))try{return getAddress(JSON.parse(n).address)}catch{return null}return null}var scryptExports=requireScrypt();const scrypt=getDefaultExportFromCjs(scryptExports);var __awaiter$a=function(n,t,u,c){function ee(te){return te instanceof u?te:new u(function(ae){ae(te)})}return new(u||(u=Promise))(function(te,ae){function ne(se){try{ie(c.next(se))}catch(ue){ae(ue)}}function oe(se){try{ie(c.throw(se))}catch(ue){ae(ue)}}function ie(se){se.done?te(se.value):ee(se.value).then(ne,oe)}ie((c=c.apply(n,t||[])).next())})};const logger$l=new Logger(version$d);function hasMnemonic$1(n){return n!=null&&n.mnemonic&&n.mnemonic.phrase}class KeystoreAccount extends Description{isKeystoreAccount(t){return!!(t&&t._isKeystoreAccount)}}function _decrypt(n,t,u){if(searchPath(n,"crypto/cipher")==="aes-128-ctr"){const ee=looseArrayify(searchPath(n,"crypto/cipherparams/iv")),te=new aes$2.Counter(ee),ae=new aes$2.ModeOfOperation.ctr(t,te);return arrayify(ae.decrypt(u))}return null}function _getAccount(n,t){const u=looseArrayify(searchPath(n,"crypto/ciphertext"));if(hexlify(keccak256$1(concat$4([t.slice(16,32),u]))).substring(2)!==searchPath(n,"crypto/mac").toLowerCase())throw new Error("invalid password");const ee=_decrypt(n,t.slice(0,16),u);ee||logger$l.throwError("unsupported cipher",Logger.errors.UNSUPPORTED_OPERATION,{operation:"decrypt"});const te=t.slice(32,64),ae=computeAddress(ee);if(n.address){let oe=n.address.toLowerCase();if(oe.substring(0,2)!=="0x"&&(oe="0x"+oe),getAddress(oe)!==ae)throw new Error("address mismatch")}const ne={_isKeystoreAccount:!0,address:ae,privateKey:hexlify(ee)};if(searchPath(n,"x-ethers/version")==="0.1"){const oe=looseArrayify(searchPath(n,"x-ethers/mnemonicCiphertext")),ie=looseArrayify(searchPath(n,"x-ethers/mnemonicCounter")),se=new aes$2.Counter(ie),ue=new aes$2.ModeOfOperation.ctr(te,se),le=searchPath(n,"x-ethers/path")||defaultPath,ce=searchPath(n,"x-ethers/locale")||"en",de=arrayify(ue.decrypt(oe));try{const fe=entropyToMnemonic(de,ce),pe=HDNode.fromMnemonic(fe,null,ce).derivePath(le);if(pe.privateKey!=ne.privateKey)throw new Error("mnemonic mismatch");ne.mnemonic=pe.mnemonic}catch(fe){if(fe.code!==Logger.errors.INVALID_ARGUMENT||fe.argument!=="wordlist")throw fe}}return new KeystoreAccount(ne)}function pbkdf2Sync(n,t,u,c,ee){return arrayify(pbkdf2$3(n,t,u,c,ee))}function pbkdf2$2(n,t,u,c,ee){return Promise.resolve(pbkdf2Sync(n,t,u,c,ee))}function _computeKdfKey(n,t,u,c,ee){const te=getPassword(t),ae=searchPath(n,"crypto/kdf");if(ae&&typeof ae=="string"){const ne=function(oe,ie){return logger$l.throwArgumentError("invalid key-derivation function parameters",oe,ie)};if(ae.toLowerCase()==="scrypt"){const oe=looseArrayify(searchPath(n,"crypto/kdfparams/salt")),ie=parseInt(searchPath(n,"crypto/kdfparams/n")),se=parseInt(searchPath(n,"crypto/kdfparams/r")),ue=parseInt(searchPath(n,"crypto/kdfparams/p"));(!ie||!se||!ue)&&ne("kdf",ae),ie&ie-1&&ne("N",ie);const le=parseInt(searchPath(n,"crypto/kdfparams/dklen"));return le!==32&&ne("dklen",le),c(te,oe,ie,se,ue,64,ee)}else if(ae.toLowerCase()==="pbkdf2"){const oe=looseArrayify(searchPath(n,"crypto/kdfparams/salt"));let ie=null;const se=searchPath(n,"crypto/kdfparams/prf");se==="hmac-sha256"?ie="sha256":se==="hmac-sha512"?ie="sha512":ne("prf",se);const ue=parseInt(searchPath(n,"crypto/kdfparams/c")),le=parseInt(searchPath(n,"crypto/kdfparams/dklen"));return le!==32&&ne("dklen",le),u(te,oe,ue,le,ie)}}return logger$l.throwArgumentError("unsupported key-derivation function","kdf",ae)}function decryptSync(n,t){const u=JSON.parse(n),c=_computeKdfKey(u,t,pbkdf2Sync,scrypt.syncScrypt);return _getAccount(u,c)}function decrypt(n,t,u){return __awaiter$a(this,void 0,void 0,function*(){const c=JSON.parse(n),ee=yield _computeKdfKey(c,t,pbkdf2$2,scrypt.scrypt,u);return _getAccount(c,ee)})}function encrypt(n,t,u,c){try{if(getAddress(n.address)!==computeAddress(n.privateKey))throw new Error("address/privateKey mismatch");if(hasMnemonic$1(n)){const pe=n.mnemonic;if(HDNode.fromMnemonic(pe.phrase,null,pe.locale).derivePath(pe.path||defaultPath).privateKey!=n.privateKey)throw new Error("mnemonic mismatch")}}catch(pe){return Promise.reject(pe)}typeof u=="function"&&!c&&(c=u,u={}),u||(u={});const ee=arrayify(n.privateKey),te=getPassword(t);let ae=null,ne=null,oe=null;if(hasMnemonic$1(n)){const pe=n.mnemonic;ae=arrayify(mnemonicToEntropy(pe.phrase,pe.locale||"en")),ne=pe.path||defaultPath,oe=pe.locale||"en"}let ie=u.client;ie||(ie="ethers.js");let se=null;u.salt?se=arrayify(u.salt):se=randomBytes(32);let ue=null;if(u.iv){if(ue=arrayify(u.iv),ue.length!==16)throw new Error("invalid iv")}else ue=randomBytes(16);let le=null;if(u.uuid){if(le=arrayify(u.uuid),le.length!==16)throw new Error("invalid uuid")}else le=randomBytes(16);let ce=1<<17,de=8,fe=1;return u.scrypt&&(u.scrypt.N&&(ce=u.scrypt.N),u.scrypt.r&&(de=u.scrypt.r),u.scrypt.p&&(fe=u.scrypt.p)),scrypt.scrypt(te,se,ce,de,fe,64,c).then(pe=>{pe=arrayify(pe);const me=pe.slice(0,16),ge=pe.slice(16,32),De=pe.slice(32,64),Ce=new aes$2.Counter(ue),we=new aes$2.ModeOfOperation.ctr(me,Ce),xe=arrayify(we.encrypt(ee)),Re=keccak256$1(concat$4([ge,xe])),Be={address:n.address.substring(2).toLowerCase(),id:uuidV4(le),version:3,crypto:{cipher:"aes-128-ctr",cipherparams:{iv:hexlify(ue).substring(2)},ciphertext:hexlify(xe).substring(2),kdf:"scrypt",kdfparams:{salt:hexlify(se).substring(2),n:ce,dklen:32,p:fe,r:de},mac:Re.substring(2)}};if(ae){const Se=randomBytes(16),Te=new aes$2.Counter(Se),Ae=new aes$2.ModeOfOperation.ctr(De,Te),he=arrayify(Ae.encrypt(ae)),ve=new Date,ye=ve.getUTCFullYear()+"-"+zpad(ve.getUTCMonth()+1,2)+"-"+zpad(ve.getUTCDate(),2)+"T"+zpad(ve.getUTCHours(),2)+"-"+zpad(ve.getUTCMinutes(),2)+"-"+zpad(ve.getUTCSeconds(),2)+".0Z";Be["x-ethers"]={client:ie,gethFilename:"UTC--"+ye+"--"+Be.address,mnemonicCounter:hexlify(Se).substring(2),mnemonicCiphertext:hexlify(he).substring(2),path:ne,locale:oe,version:"0.1"}}return JSON.stringify(Be)})}function decryptJsonWallet(n,t,u){if(isCrowdsaleWallet(n)){u&&u(0);const c=decrypt$1(n,t);return u&&u(1),Promise.resolve(c)}return isKeystoreWallet(n)?decrypt(n,t,u):Promise.reject(new Error("invalid JSON wallet"))}function decryptJsonWalletSync(n,t){if(isCrowdsaleWallet(n))return decrypt$1(n,t);if(isKeystoreWallet(n))return decryptSync(n,t);throw new Error("invalid JSON wallet")}const version$c="wallet/5.7.0";var __awaiter$9=function(n,t,u,c){function ee(te){return te instanceof u?te:new u(function(ae){ae(te)})}return new(u||(u=Promise))(function(te,ae){function ne(se){try{ie(c.next(se))}catch(ue){ae(ue)}}function oe(se){try{ie(c.throw(se))}catch(ue){ae(ue)}}function ie(se){se.done?te(se.value):ee(se.value).then(ne,oe)}ie((c=c.apply(n,t||[])).next())})};const logger$k=new Logger(version$c);function isAccount(n){return n!=null&&isHexString(n.privateKey,32)&&n.address!=null}function hasMnemonic(n){const t=n.mnemonic;return t&&t.phrase}class Wallet extends Signer$1{constructor(t,u){if(super(),isAccount(t)){const c=new SigningKey(t.privateKey);if(defineReadOnly(this,"_signingKey",()=>c),defineReadOnly(this,"address",computeAddress(this.publicKey)),this.address!==getAddress(t.address)&&logger$k.throwArgumentError("privateKey/address mismatch","privateKey","[REDACTED]"),hasMnemonic(t)){const ee=t.mnemonic;defineReadOnly(this,"_mnemonic",()=>({phrase:ee.phrase,path:ee.path||defaultPath,locale:ee.locale||"en"}));const te=this.mnemonic,ae=HDNode.fromMnemonic(te.phrase,null,te.locale).derivePath(te.path);computeAddress(ae.privateKey)!==this.address&&logger$k.throwArgumentError("mnemonic/address mismatch","privateKey","[REDACTED]")}else defineReadOnly(this,"_mnemonic",()=>null)}else{if(SigningKey.isSigningKey(t))t.curve!=="secp256k1"&&logger$k.throwArgumentError("unsupported curve; must be secp256k1","privateKey","[REDACTED]"),defineReadOnly(this,"_signingKey",()=>t);else{typeof t=="string"&&t.match(/^[0-9a-f]*$/i)&&t.length===64&&(t="0x"+t);const c=new SigningKey(t);defineReadOnly(this,"_signingKey",()=>c)}defineReadOnly(this,"_mnemonic",()=>null),defineReadOnly(this,"address",computeAddress(this.publicKey))}u&&!Provider.isProvider(u)&&logger$k.throwArgumentError("invalid provider","provider",u),defineReadOnly(this,"provider",u||null)}get mnemonic(){return this._mnemonic()}get privateKey(){return this._signingKey().privateKey}get publicKey(){return this._signingKey().publicKey}getAddress(){return Promise.resolve(this.address)}connect(t){return new Wallet(this,t)}signTransaction(t){return resolveProperties(t).then(u=>{u.from!=null&&(getAddress(u.from)!==this.address&&logger$k.throwArgumentError("transaction from address mismatch","transaction.from",t.from),delete u.from);const c=this._signingKey().signDigest(keccak256$1(serialize$1(u)));return serialize$1(u,c)})}signMessage(t){return __awaiter$9(this,void 0,void 0,function*(){return joinSignature(this._signingKey().signDigest(hashMessage(t)))})}_signTypedData(t,u,c){return __awaiter$9(this,void 0,void 0,function*(){const ee=yield TypedDataEncoder.resolveNames(t,u,c,te=>(this.provider==null&&logger$k.throwError("cannot resolve ENS names without a provider",Logger.errors.UNSUPPORTED_OPERATION,{operation:"resolveName",value:te}),this.provider.resolveName(te)));return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(ee.domain,u,ee.value)))})}encrypt(t,u,c){if(typeof u=="function"&&!c&&(c=u,u={}),c&&typeof c!="function")throw new Error("invalid callback");return u||(u={}),encrypt(this,t,u,c)}static createRandom(t){let u=randomBytes(16);t||(t={}),t.extraEntropy&&(u=arrayify(hexDataSlice(keccak256$1(concat$4([u,t.extraEntropy])),0,16)));const c=entropyToMnemonic(u,t.locale);return Wallet.fromMnemonic(c,t.path,t.locale)}static fromEncryptedJson(t,u,c){return decryptJsonWallet(t,u,c).then(ee=>new Wallet(ee))}static fromEncryptedJsonSync(t,u){return new Wallet(decryptJsonWalletSync(t,u))}static fromMnemonic(t,u,c){return u||(u=defaultPath),new Wallet(HDNode.fromMnemonic(t,null,c).derivePath(u))}}function verifyMessage(n,t){return recoverAddress(hashMessage(n),t)}function verifyTypedData(n,t,u,c){return recoverAddress(TypedDataEncoder.hash(n,t,u),c)}const version$b="networks/5.7.1",logger$j=new Logger(version$b);function isRenetworkable(n){return n&&typeof n.renetwork=="function"}function ethDefaultProvider(n){const t=function(u,c){c==null&&(c={});const ee=[];if(u.InfuraProvider&&c.infura!=="-")try{ee.push(new u.InfuraProvider(n,c.infura))}catch{}if(u.EtherscanProvider&&c.etherscan!=="-")try{ee.push(new u.EtherscanProvider(n,c.etherscan))}catch{}if(u.AlchemyProvider&&c.alchemy!=="-")try{ee.push(new u.AlchemyProvider(n,c.alchemy))}catch{}if(u.PocketProvider&&c.pocket!=="-"){const te=["goerli","ropsten","rinkeby","sepolia"];try{const ae=new u.PocketProvider(n,c.pocket);ae.network&&te.indexOf(ae.network.name)===-1&&ee.push(ae)}catch{}}if(u.CloudflareProvider&&c.cloudflare!=="-")try{ee.push(new u.CloudflareProvider(n))}catch{}if(u.AnkrProvider&&c.ankr!=="-")try{const te=["ropsten"],ae=new u.AnkrProvider(n,c.ankr);ae.network&&te.indexOf(ae.network.name)===-1&&ee.push(ae)}catch{}if(ee.length===0)return null;if(u.FallbackProvider){let te=1;return c.quorum!=null?te=c.quorum:n==="homestead"&&(te=2),new u.FallbackProvider(ee,te)}return ee[0]};return t.renetwork=function(u){return ethDefaultProvider(u)},t}function etcDefaultProvider(n,t){const u=function(c,ee){return c.JsonRpcProvider?new c.JsonRpcProvider(n,t):null};return u.renetwork=function(c){return etcDefaultProvider(n,c)},u}const homestead={chainId:1,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"homestead",_defaultProvider:ethDefaultProvider("homestead")},ropsten={chainId:3,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"ropsten",_defaultProvider:ethDefaultProvider("ropsten")},classicMordor={chainId:63,name:"classicMordor",_defaultProvider:etcDefaultProvider("https://www.ethercluster.com/mordor","classicMordor")},networks$2={unspecified:{chainId:0,name:"unspecified"},homestead,mainnet:homestead,morden:{chainId:2,name:"morden"},ropsten,testnet:ropsten,rinkeby:{chainId:4,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"rinkeby",_defaultProvider:ethDefaultProvider("rinkeby")},kovan:{chainId:42,name:"kovan",_defaultProvider:ethDefaultProvider("kovan")},goerli:{chainId:5,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"goerli",_defaultProvider:ethDefaultProvider("goerli")},kintsugi:{chainId:1337702,name:"kintsugi"},sepolia:{chainId:11155111,name:"sepolia",_defaultProvider:ethDefaultProvider("sepolia")},classic:{chainId:61,name:"classic",_defaultProvider:etcDefaultProvider("https://www.ethercluster.com/etc","classic")},classicMorden:{chainId:62,name:"classicMorden"},classicMordor,classicTestnet:classicMordor,classicKotti:{chainId:6,name:"classicKotti",_defaultProvider:etcDefaultProvider("https://www.ethercluster.com/kotti","classicKotti")},xdai:{chainId:100,name:"xdai"},matic:{chainId:137,name:"matic",_defaultProvider:ethDefaultProvider("matic")},maticmum:{chainId:80001,name:"maticmum"},optimism:{chainId:10,name:"optimism",_defaultProvider:ethDefaultProvider("optimism")},"optimism-kovan":{chainId:69,name:"optimism-kovan"},"optimism-goerli":{chainId:420,name:"optimism-goerli"},arbitrum:{chainId:42161,name:"arbitrum"},"arbitrum-rinkeby":{chainId:421611,name:"arbitrum-rinkeby"},"arbitrum-goerli":{chainId:421613,name:"arbitrum-goerli"},bnb:{chainId:56,name:"bnb"},bnbt:{chainId:97,name:"bnbt"}};function getNetwork(n){if(n==null)return null;if(typeof n=="number"){for(const c in networks$2){const ee=networks$2[c];if(ee.chainId===n)return{name:ee.name,chainId:ee.chainId,ensAddress:ee.ensAddress||null,_defaultProvider:ee._defaultProvider||null}}return{chainId:n,name:"unknown"}}if(typeof n=="string"){const c=networks$2[n];return c==null?null:{name:c.name,chainId:c.chainId,ensAddress:c.ensAddress,_defaultProvider:c._defaultProvider||null}}const t=networks$2[n.name];if(!t)return typeof n.chainId!="number"&&logger$j.throwArgumentError("invalid network chainId","network",n),n;n.chainId!==0&&n.chainId!==t.chainId&&logger$j.throwArgumentError("network chainId mismatch","network",n);let u=n._defaultProvider||null;return u==null&&t._defaultProvider&&(isRenetworkable(t._defaultProvider)?u=t._defaultProvider.renetwork(n):u=t._defaultProvider),{name:n.name,chainId:t.chainId,ensAddress:n.ensAddress||t.ensAddress||null,_defaultProvider:u}}const version$a="web/5.7.1";var __awaiter$8=function(n,t,u,c){function ee(te){return te instanceof u?te:new u(function(ae){ae(te)})}return new(u||(u=Promise))(function(te,ae){function ne(se){try{ie(c.next(se))}catch(ue){ae(ue)}}function oe(se){try{ie(c.throw(se))}catch(ue){ae(ue)}}function ie(se){se.done?te(se.value):ee(se.value).then(ne,oe)}ie((c=c.apply(n,t||[])).next())})};function getUrl(n,t){return __awaiter$8(this,void 0,void 0,function*(){t==null&&(t={});const u={method:t.method||"GET",headers:t.headers||{},body:t.body||void 0};if(t.skipFetchSetup!==!0&&(u.mode="cors",u.cache="no-cache",u.credentials="same-origin",u.redirect="follow",u.referrer="client"),t.fetchOptions!=null){const ae=t.fetchOptions;ae.mode&&(u.mode=ae.mode),ae.cache&&(u.cache=ae.cache),ae.credentials&&(u.credentials=ae.credentials),ae.redirect&&(u.redirect=ae.redirect),ae.referrer&&(u.referrer=ae.referrer)}const c=yield fetch(n,u),ee=yield c.arrayBuffer(),te={};return c.headers.forEach?c.headers.forEach((ae,ne)=>{te[ne.toLowerCase()]=ae}):c.headers.keys().forEach(ae=>{te[ae.toLowerCase()]=c.headers.get(ae)}),{headers:te,statusCode:c.status,statusMessage:c.statusText,body:arrayify(new Uint8Array(ee))}})}var __awaiter$7=function(n,t,u,c){function ee(te){return te instanceof u?te:new u(function(ae){ae(te)})}return new(u||(u=Promise))(function(te,ae){function ne(se){try{ie(c.next(se))}catch(ue){ae(ue)}}function oe(se){try{ie(c.throw(se))}catch(ue){ae(ue)}}function ie(se){se.done?te(se.value):ee(se.value).then(ne,oe)}ie((c=c.apply(n,t||[])).next())})};const logger$i=new Logger(version$a);function staller(n){return new Promise(t=>{setTimeout(t,n)})}function bodyify(n,t){if(n==null)return null;if(typeof n=="string")return n;if(isBytesLike(n)){if(t&&(t.split("/")[0]==="text"||t.split(";")[0].trim()==="application/json"))try{return toUtf8String(n)}catch{}return hexlify(n)}return n}function unpercent(n){return toUtf8Bytes(n.replace(/%([0-9a-f][0-9a-f])/gi,(t,u)=>String.fromCharCode(parseInt(u,16))))}function _fetchData(n,t,u){const c=typeof n=="object"&&n.throttleLimit!=null?n.throttleLimit:12;logger$i.assertArgument(c>0&&c%1===0,"invalid connection throttle limit","connection.throttleLimit",c);const ee=typeof n=="object"?n.throttleCallback:null,te=typeof n=="object"&&typeof n.throttleSlotInterval=="number"?n.throttleSlotInterval:100;logger$i.assertArgument(te>0&&te%1===0,"invalid connection throttle slot interval","connection.throttleSlotInterval",te);const ae=typeof n=="object"?!!n.errorPassThrough:!1,ne={};let oe=null;const ie={method:"GET"};let se=!1,ue=2*60*1e3;if(typeof n=="string")oe=n;else if(typeof n=="object"){if((n==null||n.url==null)&&logger$i.throwArgumentError("missing URL","connection.url",n),oe=n.url,typeof n.timeout=="number"&&n.timeout>0&&(ue=n.timeout),n.headers)for(const me in n.headers)ne[me.toLowerCase()]={key:me,value:String(n.headers[me])},["if-none-match","if-modified-since"].indexOf(me.toLowerCase())>=0&&(se=!0);if(ie.allowGzip=!!n.allowGzip,n.user!=null&&n.password!=null){oe.substring(0,6)!=="https:"&&n.allowInsecureAuthentication!==!0&&logger$i.throwError("basic authentication requires a secure https url",Logger.errors.INVALID_ARGUMENT,{argument:"url",url:oe,user:n.user,password:"[REDACTED]"});const me=n.user+":"+n.password;ne.authorization={key:"Authorization",value:"Basic "+encode$1(toUtf8Bytes(me))}}n.skipFetchSetup!=null&&(ie.skipFetchSetup=!!n.skipFetchSetup),n.fetchOptions!=null&&(ie.fetchOptions=shallowCopy(n.fetchOptions))}const le=new RegExp("^data:([^;:]*)?(;base64)?,(.*)$","i"),ce=oe?oe.match(le):null;if(ce)try{const me={statusCode:200,statusMessage:"OK",headers:{"content-type":ce[1]||"text/plain"},body:ce[2]?decode$2(ce[3]):unpercent(ce[3])};let ge=me.body;return u&&(ge=u(me.body,me)),Promise.resolve(ge)}catch(me){logger$i.throwError("processing response error",Logger.errors.SERVER_ERROR,{body:bodyify(ce[1],ce[2]),error:me,requestBody:null,requestMethod:"GET",url:oe})}t&&(ie.method="POST",ie.body=t,ne["content-type"]==null&&(ne["content-type"]={key:"Content-Type",value:"application/octet-stream"}),ne["content-length"]==null&&(ne["content-length"]={key:"Content-Length",value:String(t.length)}));const de={};Object.keys(ne).forEach(me=>{const ge=ne[me];de[ge.key]=ge.value}),ie.headers=de;const fe=function(){let me=null;return{promise:new Promise(function(Ce,we){ue&&(me=setTimeout(()=>{me!=null&&(me=null,we(logger$i.makeError("timeout",Logger.errors.TIMEOUT,{requestBody:bodyify(ie.body,de["content-type"]),requestMethod:ie.method,timeout:ue,url:oe})))},ue))}),cancel:function(){me!=null&&(clearTimeout(me),me=null)}}}(),pe=function(){return __awaiter$7(this,void 0,void 0,function*(){for(let me=0;me<c;me++){let ge=null;try{if(ge=yield getUrl(oe,ie),me<c){if(ge.statusCode===301||ge.statusCode===302){const Ce=ge.headers.location||"";if(ie.method==="GET"&&Ce.match(/^https:/)){oe=ge.headers.location;continue}}else if(ge.statusCode===429){let Ce=!0;if(ee&&(Ce=yield ee(me,oe)),Ce){let we=0;const xe=ge.headers["retry-after"];typeof xe=="string"&&xe.match(/^[1-9][0-9]*$/)?we=parseInt(xe)*1e3:we=te*parseInt(String(Math.random()*Math.pow(2,me))),yield staller(we);continue}}}}catch(Ce){ge=Ce.response,ge==null&&(fe.cancel(),logger$i.throwError("missing response",Logger.errors.SERVER_ERROR,{requestBody:bodyify(ie.body,de["content-type"]),requestMethod:ie.method,serverError:Ce,url:oe}))}let De=ge.body;if(se&&ge.statusCode===304?De=null:!ae&&(ge.statusCode<200||ge.statusCode>=300)&&(fe.cancel(),logger$i.throwError("bad response",Logger.errors.SERVER_ERROR,{status:ge.statusCode,headers:ge.headers,body:bodyify(De,ge.headers?ge.headers["content-type"]:null),requestBody:bodyify(ie.body,de["content-type"]),requestMethod:ie.method,url:oe})),u)try{const Ce=yield u(De,ge);return fe.cancel(),Ce}catch(Ce){if(Ce.throttleRetry&&me<c){let we=!0;if(ee&&(we=yield ee(me,oe)),we){const xe=te*parseInt(String(Math.random()*Math.pow(2,me)));yield staller(xe);continue}}fe.cancel(),logger$i.throwError("processing response error",Logger.errors.SERVER_ERROR,{body:bodyify(De,ge.headers?ge.headers["content-type"]:null),error:Ce,requestBody:bodyify(ie.body,de["content-type"]),requestMethod:ie.method,url:oe})}return fe.cancel(),De}return logger$i.throwError("failed response",Logger.errors.SERVER_ERROR,{requestBody:bodyify(ie.body,de["content-type"]),requestMethod:ie.method,url:oe})})}();return Promise.race([fe.promise,pe])}function fetchJson(n,t,u){let c=(te,ae)=>{let ne=null;if(te!=null)try{ne=JSON.parse(toUtf8String(te))}catch(oe){logger$i.throwError("invalid JSON",Logger.errors.SERVER_ERROR,{body:te,error:oe})}return u&&(ne=u(ne,ae)),ne},ee=null;if(t!=null){ee=toUtf8Bytes(t);const te=typeof n=="string"?{url:n}:shallowCopy(n);te.headers?Object.keys(te.headers).filter(ne=>ne.toLowerCase()==="content-type").length!==0||(te.headers=shallowCopy(te.headers),te.headers["content-type"]="application/json"):te.headers={"content-type":"application/json"},n=te}return _fetchData(n,ee,c)}function poll(n,t){return t||(t={}),t=shallowCopy(t),t.floor==null&&(t.floor=0),t.ceiling==null&&(t.ceiling=1e4),t.interval==null&&(t.interval=250),new Promise(function(u,c){let ee=null,te=!1;const ae=()=>te?!1:(te=!0,ee&&clearTimeout(ee),!0);t.timeout&&(ee=setTimeout(()=>{ae()&&c(new Error("timeout"))},t.timeout));const ne=t.retryLimit;let oe=0;function ie(){return n().then(function(se){if(se!==void 0)ae()&&u(se);else if(t.oncePoll)t.oncePoll.once("poll",ie);else if(t.onceBlock)t.onceBlock.once("block",ie);else if(!te){if(oe++,oe>ne){ae()&&c(new Error("retry limit reached"));return}let ue=t.interval*parseInt(String(Math.random()*Math.pow(2,oe)));ue<t.floor&&(ue=t.floor),ue>t.ceiling&&(ue=t.ceiling),setTimeout(ie,ue)}return null},function(se){ae()&&c(se)})}ie()})}var bech32Exports=requireBech32();const bech32=getDefaultExportFromCjs(bech32Exports),version$9="providers/5.7.2",logger$h=new Logger(version$9);class Formatter{constructor(){this.formats=this.getDefaultFormats()}getDefaultFormats(){const t={},u=this.address.bind(this),c=this.bigNumber.bind(this),ee=this.blockTag.bind(this),te=this.data.bind(this),ae=this.hash.bind(this),ne=this.hex.bind(this),oe=this.number.bind(this),ie=this.type.bind(this),se=ue=>this.data(ue,!0);return t.transaction={hash:ae,type:ie,accessList:Formatter.allowNull(this.accessList.bind(this),null),blockHash:Formatter.allowNull(ae,null),blockNumber:Formatter.allowNull(oe,null),transactionIndex:Formatter.allowNull(oe,null),confirmations:Formatter.allowNull(oe,null),from:u,gasPrice:Formatter.allowNull(c),maxPriorityFeePerGas:Formatter.allowNull(c),maxFeePerGas:Formatter.allowNull(c),gasLimit:c,to:Formatter.allowNull(u,null),value:c,nonce:oe,data:te,r:Formatter.allowNull(this.uint256),s:Formatter.allowNull(this.uint256),v:Formatter.allowNull(oe),creates:Formatter.allowNull(u,null),raw:Formatter.allowNull(te)},t.transactionRequest={from:Formatter.allowNull(u),nonce:Formatter.allowNull(oe),gasLimit:Formatter.allowNull(c),gasPrice:Formatter.allowNull(c),maxPriorityFeePerGas:Formatter.allowNull(c),maxFeePerGas:Formatter.allowNull(c),to:Formatter.allowNull(u),value:Formatter.allowNull(c),data:Formatter.allowNull(se),type:Formatter.allowNull(oe),accessList:Formatter.allowNull(this.accessList.bind(this),null)},t.receiptLog={transactionIndex:oe,blockNumber:oe,transactionHash:ae,address:u,topics:Formatter.arrayOf(ae),data:te,logIndex:oe,blockHash:ae},t.receipt={to:Formatter.allowNull(this.address,null),from:Formatter.allowNull(this.address,null),contractAddress:Formatter.allowNull(u,null),transactionIndex:oe,root:Formatter.allowNull(ne),gasUsed:c,logsBloom:Formatter.allowNull(te),blockHash:ae,transactionHash:ae,logs:Formatter.arrayOf(this.receiptLog.bind(this)),blockNumber:oe,confirmations:Formatter.allowNull(oe,null),cumulativeGasUsed:c,effectiveGasPrice:Formatter.allowNull(c),status:Formatter.allowNull(oe),type:ie},t.block={hash:Formatter.allowNull(ae),parentHash:ae,number:oe,timestamp:oe,nonce:Formatter.allowNull(ne),difficulty:this.difficulty.bind(this),gasLimit:c,gasUsed:c,miner:Formatter.allowNull(u),extraData:te,transactions:Formatter.allowNull(Formatter.arrayOf(ae)),baseFeePerGas:Formatter.allowNull(c)},t.blockWithTransactions=shallowCopy(t.block),t.blockWithTransactions.transactions=Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this))),t.filter={fromBlock:Formatter.allowNull(ee,void 0),toBlock:Formatter.allowNull(ee,void 0),blockHash:Formatter.allowNull(ae,void 0),address:Formatter.allowNull(u,void 0),topics:Formatter.allowNull(this.topics.bind(this),void 0)},t.filterLog={blockNumber:Formatter.allowNull(oe),blockHash:Formatter.allowNull(ae),transactionIndex:oe,removed:Formatter.allowNull(this.boolean.bind(this)),address:u,data:Formatter.allowFalsish(te,"0x"),topics:Formatter.arrayOf(ae),transactionHash:ae,logIndex:oe},t}accessList(t){return accessListify(t||[])}number(t){return t==="0x"?0:BigNumber.from(t).toNumber()}type(t){return t==="0x"||t==null?0:BigNumber.from(t).toNumber()}bigNumber(t){return BigNumber.from(t)}boolean(t){if(typeof t=="boolean")return t;if(typeof t=="string"){if(t=t.toLowerCase(),t==="true")return!0;if(t==="false")return!1}throw new Error("invalid boolean - "+t)}hex(t,u){return typeof t=="string"&&(!u&&t.substring(0,2)!=="0x"&&(t="0x"+t),isHexString(t))?t.toLowerCase():logger$h.throwArgumentError("invalid hash","value",t)}data(t,u){const c=this.hex(t,u);if(c.length%2!==0)throw new Error("invalid data; odd-length - "+t);return c}address(t){return getAddress(t)}callAddress(t){if(!isHexString(t,32))return null;const u=getAddress(hexDataSlice(t,12));return u===AddressZero?null:u}contractAddress(t){return getContractAddress(t)}blockTag(t){if(t==null)return"latest";if(t==="earliest")return"0x0";switch(t){case"earliest":return"0x0";case"latest":case"pending":case"safe":case"finalized":return t}if(typeof t=="number"||isHexString(t))return hexValue(t);throw new Error("invalid blockTag")}hash(t,u){const c=this.hex(t,u);return hexDataLength(c)!==32?logger$h.throwArgumentError("invalid hash","value",t):c}difficulty(t){if(t==null)return null;const u=BigNumber.from(t);try{return u.toNumber()}catch{}return null}uint256(t){if(!isHexString(t))throw new Error("invalid uint256");return hexZeroPad(t,32)}_block(t,u){t.author!=null&&t.miner==null&&(t.miner=t.author);const c=t._difficulty!=null?t._difficulty:t.difficulty,ee=Formatter.check(u,t);return ee._difficulty=c==null?null:BigNumber.from(c),ee}block(t){return this._block(t,this.formats.block)}blockWithTransactions(t){return this._block(t,this.formats.blockWithTransactions)}transactionRequest(t){return Formatter.check(this.formats.transactionRequest,t)}transactionResponse(t){t.gas!=null&&t.gasLimit==null&&(t.gasLimit=t.gas),t.to&&BigNumber.from(t.to).isZero()&&(t.to="0x0000000000000000000000000000000000000000"),t.input!=null&&t.data==null&&(t.data=t.input),t.to==null&&t.creates==null&&(t.creates=this.contractAddress(t)),(t.type===1||t.type===2)&&t.accessList==null&&(t.accessList=[]);const u=Formatter.check(this.formats.transaction,t);if(t.chainId!=null){let c=t.chainId;isHexString(c)&&(c=BigNumber.from(c).toNumber()),u.chainId=c}else{let c=t.networkId;c==null&&u.v==null&&(c=t.chainId),isHexString(c)&&(c=BigNumber.from(c).toNumber()),typeof c!="number"&&u.v!=null&&(c=(u.v-35)/2,c<0&&(c=0),c=parseInt(c)),typeof c!="number"&&(c=0),u.chainId=c}return u.blockHash&&u.blockHash.replace(/0/g,"")==="x"&&(u.blockHash=null),u}transaction(t){return parse$3(t)}receiptLog(t){return Formatter.check(this.formats.receiptLog,t)}receipt(t){const u=Formatter.check(this.formats.receipt,t);if(u.root!=null)if(u.root.length<=4){const c=BigNumber.from(u.root).toNumber();c===0||c===1?(u.status!=null&&u.status!==c&&logger$h.throwArgumentError("alt-root-status/status mismatch","value",{root:u.root,status:u.status}),u.status=c,delete u.root):logger$h.throwArgumentError("invalid alt-root-status","value.root",u.root)}else u.root.length!==66&&logger$h.throwArgumentError("invalid root hash","value.root",u.root);return u.status!=null&&(u.byzantium=!0),u}topics(t){return Array.isArray(t)?t.map(u=>this.topics(u)):t!=null?this.hash(t,!0):null}filter(t){return Formatter.check(this.formats.filter,t)}filterLog(t){return Formatter.check(this.formats.filterLog,t)}static check(t,u){const c={};for(const ee in t)try{const te=t[ee](u[ee]);te!==void 0&&(c[ee]=te)}catch(te){throw te.checkKey=ee,te.checkValue=u[ee],te}return c}static allowNull(t,u){return function(c){return c==null?u:t(c)}}static allowFalsish(t,u){return function(c){return c?t(c):u}}static arrayOf(t){return function(u){if(!Array.isArray(u))throw new Error("not an array");const c=[];return u.forEach(function(ee){c.push(t(ee))}),c}}}function isCommunityResourcable(n){return n&&typeof n.isCommunityResource=="function"}function isCommunityResource(n){return isCommunityResourcable(n)&&n.isCommunityResource()}let throttleMessage=!1;function showThrottleMessage(){throttleMessage||(throttleMessage=!0,console.log("========= NOTICE ========="),console.log("Request-Rate Exceeded  (this message will not be repeated)"),console.log(""),console.log("The default API keys for each service are provided as a highly-throttled,"),console.log("community resource for low-traffic projects and early prototyping."),console.log(""),console.log("While your application will continue to function, we highly recommended"),console.log("signing up for your own API keys to improve performance, increase your"),console.log("request rate/limit and enable other perks, such as metrics and advanced APIs."),console.log(""),console.log("For more details: https://docs.ethers.io/api-keys/"),console.log("=========================="))}var __awaiter$6=function(n,t,u,c){function ee(te){return te instanceof u?te:new u(function(ae){ae(te)})}return new(u||(u=Promise))(function(te,ae){function ne(se){try{ie(c.next(se))}catch(ue){ae(ue)}}function oe(se){try{ie(c.throw(se))}catch(ue){ae(ue)}}function ie(se){se.done?te(se.value):ee(se.value).then(ne,oe)}ie((c=c.apply(n,t||[])).next())})};const logger$g=new Logger(version$9),MAX_CCIP_REDIRECTS=10;function checkTopic(n){return n==null?"null":(hexDataLength(n)!==32&&logger$g.throwArgumentError("invalid topic","topic",n),n.toLowerCase())}function serializeTopics(n){for(n=n.slice();n.length>0&&n[n.length-1]==null;)n.pop();return n.map(t=>{if(Array.isArray(t)){const u={};t.forEach(ee=>{u[checkTopic(ee)]=!0});const c=Object.keys(u);return c.sort(),c.join("|")}else return checkTopic(t)}).join("&")}function deserializeTopics(n){return n===""?[]:n.split(/&/g).map(t=>{if(t==="")return[];const u=t.split("|").map(c=>c==="null"?null:c);return u.length===1?u[0]:u})}function getEventTag(n){if(typeof n=="string"){if(n=n.toLowerCase(),hexDataLength(n)===32)return"tx:"+n;if(n.indexOf(":")===-1)return n}else{if(Array.isArray(n))return"filter:*:"+serializeTopics(n);if(ForkEvent.isForkEvent(n))throw logger$g.warn("not implemented"),new Error("not implemented");if(n&&typeof n=="object")return"filter:"+(n.address||"*")+":"+serializeTopics(n.topics||[])}throw new Error("invalid event - "+n)}function getTime(){return new Date().getTime()}function stall$1(n){return new Promise(t=>{setTimeout(t,n)})}const PollableEvents=["block","network","pending","poll"];class Event{constructor(t,u,c){defineReadOnly(this,"tag",t),defineReadOnly(this,"listener",u),defineReadOnly(this,"once",c),this._lastBlockNumber=-2,this._inflight=!1}get event(){switch(this.type){case"tx":return this.hash;case"filter":return this.filter}return this.tag}get type(){return this.tag.split(":")[0]}get hash(){const t=this.tag.split(":");return t[0]!=="tx"?null:t[1]}get filter(){const t=this.tag.split(":");if(t[0]!=="filter")return null;const u=t[1],c=deserializeTopics(t[2]),ee={};return c.length>0&&(ee.topics=c),u&&u!=="*"&&(ee.address=u),ee}pollable(){return this.tag.indexOf(":")>=0||PollableEvents.indexOf(this.tag)>=0}}const coinInfos={0:{symbol:"btc",p2pkh:0,p2sh:5,prefix:"bc"},2:{symbol:"ltc",p2pkh:48,p2sh:50,prefix:"ltc"},3:{symbol:"doge",p2pkh:30,p2sh:22},60:{symbol:"eth",ilk:"eth"},61:{symbol:"etc",ilk:"eth"},700:{symbol:"xdai",ilk:"eth"}};function bytes32ify(n){return hexZeroPad(BigNumber.from(n).toHexString(),32)}function base58Encode(n){return Base58.encode(concat$4([n,hexDataSlice(sha256$2(sha256$2(n)),0,4)]))}const matcherIpfs=new RegExp("^(ipfs)://(.*)$","i"),matchers=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),matcherIpfs,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];function _parseString(n,t){try{return toUtf8String(_parseBytes(n,t))}catch{}return null}function _parseBytes(n,t){if(n==="0x")return null;const u=BigNumber.from(hexDataSlice(n,t,t+32)).toNumber(),c=BigNumber.from(hexDataSlice(n,u,u+32)).toNumber();return hexDataSlice(n,u+32,u+32+c)}function getIpfsLink(n){return n.match(/^ipfs:\/\/ipfs\//i)?n=n.substring(12):n.match(/^ipfs:\/\//i)?n=n.substring(7):logger$g.throwArgumentError("unsupported IPFS format","link",n),`https://gateway.ipfs.io/ipfs/${n}`}function numPad(n){const t